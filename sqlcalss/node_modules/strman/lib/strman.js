'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * @module chars
 * @description
 * Returns an array consisting of the characters in the string.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the chars function
 * ```sh
 * yarn add strman.chars
 * ```
 * ## Usage
 * ```javascript
 * import { chars } from 'strman'
 * // OR
 * import chars from 'strman.chars'
 * ```
 * @param {String} value The input string
 * @example
 * chars('abc')
 * // => ['a', 'b', 'c']
 * @returns {String[]} The array with the single characters of `value`
 */
var chars = (function (value) {
  return value.split('');
});

/**
 * @module substr
 * @description
 * Alias to substr function.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the substr function
 * ```sh
 * yarn add strman.substr
 * ```
 * ## Usage
 * ```javascript
 * import { substr } from 'strman'
 * // OR
 * import substr from 'strman.substr'
 * ```
 * @param {String} value - The String!
 * @param {Number} start - Substring starts.
 * @param {Number} length - Substring length.
 * @example
 * substr('strman', 0, 3)
 * // => 'strm'
 * @returns {String} The Substring!
 */
var substr = (function (value, start, length) {
  return value.substr(start, length);
});

/**
 * @module toUpperCase
 * @description
 * Transform to uppercase.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toUpperCase function
 * ```sh
 * yarn add strman.touppercase
 * ```
 * ## Usage
 * ```javascript
 * import { toUpperCase } from 'strman'
 * // OR
 * import toUpperCase from 'strman.touppercase'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toUpperCase(title)
 * // => 'A JAVASCRIPT STRING MANIPULATION LIBRARY.'
 * @returns {String}  String in uppercase.
 */
var toUpperCase = (function (value) {
  return value.toUpperCase();
});

var toCaseSensitive = (function (value) {
  var caseSensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (caseSensitive) {
    return value;
  }
  return toUpperCase(value);
});

/**
 * @module startsWith
 * @description
 * Test if 'value' starts with 'search'
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the startsWith function
 * ```sh
 * yarn add strman.startswith
 * ```
 * ## Usage
 * ```javascript
 * import { startsWith } from 'strman'
 * // OR
 * import startsWith from 'strman.startswith'
 * ```
 * @param {String} value The String!
 * @param {String} search Value to search.
 * @param {Number} [position = 0] offset to search.
 * @param {Boolean} [caseSensitive = true] if you use caseSensitive to test.
 * @example
 * startsWith('strman', 'str')
 * // => true
 * @returns {Boolean}  If 'value' startsWith 'search' return true, else false.
 */
var startsWith = (function (value, search) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return substr(toCaseSensitive(value, caseSensitive), position, search.length) === toCaseSensitive(search, caseSensitive);
});

/**
 * @module appendArray
 * @description
 * Append Array of Strings on Value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the appendArray function
 * ```sh
 * yarn add strman.appendarray
 * ```
 * ## Usage
 * ```javascript
 * import { appendArray } from 'strman'
 * // OR
 * import appendArray from 'strman.appendarray'
 * ```
 * @param {String} value String initial
 * @param {String[]} append Array with strings to append
 * @example
 * appendArray('s', ['tr', 'm', 'an'])
 * // => 'strman'
 * @returns {String} The concatenated string
 */
var appendArray = (function (value) {
  var appends = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (appends.length === 0) {
    return value;
  }
  return value + appends.join('');
});

/**
 * @module append
 * @description
 * Append Strings on Value with spreaded arguments
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the append function
 * ```sh
 * yarn add strman.append
 * ```
 * ## Usage
 * ```javascript
 * import { append } from 'strman'
 * // OR
 * import append from 'strman.append'
 * ```
 * @param {String} value Initial value
 * @param {String} appends Spreaded array with strings to append
 * @example
 * append('s', 'tr', 'm', 'an')
 * // => 'strman'
 * @returns {String} The concatenated string
 */
var append = (function (value) {
  for (var _len = arguments.length, appends = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    appends[_key - 1] = arguments[_key];
  }

  return appendArray(value, appends);
});

/**
 * @module ensureLeft
 * @description
 * Ensures that the `value` begins with `substr`. If it doesn't, it's prepended.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the ensureLeft function
 * ```sh
 * yarn add strman.ensureleft
 * ```
 * ## Usage
 * ```javascript
 * import { ensureLeft } from 'strman'
 * // OR
 * import ensureLeft from 'strman.ensureleft'
 * ```
 * @param {String} value The input string
 * @param {String} substr The substr to be ensured to be left
 * @param {Boolean} [caseSensitive=true]
 * Use case (in-)sensitive matching for determining if `value` already starts with `substr`
 * @example
 * const value = 'Leite'
 * const substr = 'Daniel '
 * ensureLeft(value, substr)
 * // => 'Daniel Leite'
 * @returns {String} The string which is guarenteed to start with `substr`
 */
var ensureleft = (function (value, substr) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!startsWith(value, substr, 0, caseSensitive)) {
    return append(substr, value);
  }

  return value;
});

/**
 * @module inequal
 * @description
 * Tests if two strings are inequal.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the inequal function
 * ```sh
 * yarn add strman.inequal
 * ```
 * ## Usage
 * ```javascript
 * import { inequal } from 'strman'
 * // OR
 * import inequal from 'strman.inequal'
 * ```
 * @param {String} stringA - String for the comparative
 * @param {String} stringB - String to be compared
 * @example
 * inequal('foo', 'foo')
 * // => false
 * @returns {Boolean}  [stringA] is inequal [stringB]
 */
var inequal = (function (stringA, stringB) {
  return stringA !== stringB;
});

/**
 * @module prependArray
 * @description
 * Returns a new string starting with 'prepends'.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the prependArray function
 * ```sh
 * yarn add strman.prependarray
 * ```
 * ## Usage
 * ```javascript
 * import { prependArray } from 'strman'
 * // OR
 * import prependArray from 'strman.prependarray'
 * ```
 * @param {String} value The String!
 * @param {String[]} prepends Strings to prepend.
 * @example
 * const title = 'strman'
 * prependArray(title, ['_'])
 * // => '_strman'
 * @returns {String} The String prepended!
 */
var prependArray = (function (value) {
  var prepends = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (prepends.length === 0) {
    return value;
  }
  return prepends.join('') + value;
});

/**
 * @module prepend
 * @description
 * Returns a new string starting with 'prepends'.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the prepend function
 * ```sh
 * yarn add strman.prepend
 * ```
 * ## Usage
 * ```javascript
 * import { prepend } from 'strman'
 * // OR
 * import prepend from 'strman.prepend'
 * ```
 * @param {String} value - The String!
 * @param {...String} prepends - Strings to prepend.
 * @example
 * const title = 'strman'
 * prepend(title, '_')
 * // => '_strman'
 * @returns {String}  The String prepended!
 */
var prepend = (function (value) {
  for (var _len = arguments.length, prepends = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    prepends[_key - 1] = arguments[_key];
  }

  return prependArray(value, prepends);
});

var rightPad = function rightPad(value, length, char) {
  if (value.length === length) {
    return value;
  }
  return rightPad(append(value, char), length, char);
};

/**
 * @module rightPad
 * @description
 * Returns a new string of a given length such that the ending of the string is padded.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the rightPad function
 * ```sh
 * yarn add strman.rightpad
 * ```
 * ## Usage
 * ```javascript
 * import { rightPad } from 'strman'
 * // OR
 * import rightPad from 'strman.rightpad'
 * ```
 * @param {String} value The String!
 * @param {Number} _length Max length of String.
 * @param {Char} char Char to repeat.
 * @example
 * const title = "strman"
 * rightPad(title, 10, 0)
 * // => 'strman0000'
 * @returns {String} String pad.
 */
var rightpad = (function (value, length) {
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';
  return rightPad(value, length, substr(String(char), 0, 1));
});

/**
 * @module surround
 * @description
 * Surrounds a 'value' with the given 'substr'.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the surround function
 * ```sh
 * yarn add strman.surround
 * ```
 * ## Usage
 * ```javascript
 * import { surround } from 'strman'
 * // OR
 * import surround from 'strman.surround'
 * ```
 * @param {String} value - The String!
 * @param {String} substr
 * The substr to append on left, if substrRight is null, this is appended in right.
 * @param {String} substrRight - The substr to append on right.
 * @example
 * surround('strman', '<', '>')
 * // => '<strman>'
 * @returns {String} The String with surround substrs!
 */
var surround = (function (value) {
  var _substr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var substrRight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return append(_substr, value, substrRight === null ? _substr : substrRight);
});

// @form
/**
 * @module truncate
 * @description
 * Truncate the unsecured form string, cutting the independent string of required position.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the truncate function
 * ```sh
 * yarn add strman.truncate
 * ```
 * ## Usage
 * ```javascript
 * import { truncate } from 'strman'
 * // OR
 * import truncate from 'strman.truncate'
 * ```
 * @param {String} value - Value will be truncated unsecurely.
 * @param {Number} length - Size of the returned string.
 * @param {String} [_append = ''] - Value that will be added to the end of the return string.
 * @example
 * const title = 'A Javascript string manipulation library.'
 * truncate(title, 16, '...')
 * // => 'A Javascript ...'
 * @returns {String}  String truncated unsafely.
 */
var truncate = (function (value, length) {
  var _append = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  if (length === 0) {
    return '';
  }

  if (length >= value.length) {
    return value;
  }

  var truncated = substr(value, 0, length - _append.length);

  return append(truncated, _append);
});

/**
 * @module replace
 * @description
 * Replace all ocurrences of 'search' value to 'newvalue'.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the replace function
 * ```sh
 * yarn add strman.replace
 * ```
 * ## Usage
 * ```javascript
 * import { replace } from 'strman'
 * // OR
 * import replace from 'strman.replace'
 * ```
 * @param {String} value The String!
 * @param {String} search String to search.
 * @param {String} newvalue String to replace.
 * @param {Boolean} caseSensitive if you use caseSensitive replace.
 * @param {Boolean} multiline if you use multiline replace.
 * @example
 * const title = 'superman'
 * replace(title, 'upe', 't')
 * // => 'strman'
 * @returns {String} String replaced with 'newvalue'.
 */
var replace = (function (value) {
  var search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var newvalue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var multiline = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  var flags = caseSensitive ? 'g' : 'gi';
  var flagsMultiline = multiline ? flags + 'm' : flags;

  return value.replace(new RegExp(search, flagsMultiline), newvalue);
});

/**
 * @module leftTrim
 * @description
 * Remove all spaces on left.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the leftTrim function
 * ```sh
 * yarn add strman.lefttrim
 * ```
 * ## Usage
 * ```javascript
 * import { leftTrim } from 'strman'
 * // OR
 * import leftTrim from 'strman.lefttrim'
 * ```
 * @param {String} value The String!
 * @param {String} [char = ''] if you need remove other char on left boarders.
 * @example
 * const title = '   strman'
 * leftTrim(title)
 * // => 'strman'
 * @returns {String} String without left boarders spaces.
 */
var leftTrim = (function (value) {
  var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  return replace(value, '^' + char + '+', '');
});

/**
 * @module rightTrim
 * @description
 * Remove all spaces on right.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the rightTrim function
 * ```sh
 * yarn add strman.righttrim
 * ```
 * ## Usage
 * ```javascript
 * import { rightTrim } from 'strman'
 * // OR
 * import rightTrim from 'strman.righttrim'
 * ```
 * @param {String} value The String!
 * @param {String} [char = ' '] if you need remove other char on right boarders.
 * @example
 * const title = 'strman     '
 * rightTrim(title)
 * // => 'strman'
 * @returns {String} String without right boarders spaces.
 */
var rightTrim = (function (value) {
  var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  return replace(value, char + '+$', '');
});

/**
 * @module trim
 * @description
 * Remove all spaces on left and right.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the trim function
 * ```sh
 * yarn add strman.trim
 * ```
 * ## Usage
 * ```javascript
 * import { trim } from 'strman'
 * // OR
 * import trim from 'strman.trim'
 * ```
 * @param {String} value - String to remove spaces.
 * @param {String} [char = ' '] - if you need remove other char on boarders.
 * @example
 * const title = '   strman   '
 * trim(title)
 * // => 'strman'
 * @returns {String} String without boarders spaces.
 */
var trim = (function (value) {
  var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  return leftTrim(rightTrim(value, char), char);
});

/**
 * @module collapseWhitespace
 * @description
 * Replaces consecutive whitespace characters with a single space.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the collapseWhitespace function
 * ```sh
 * yarn add strman.collapsewhitespace
 * ```
 * ## Usage
 * ```javascript
 * import { collapseWhitespace } from 'strman'
 * // OR
 * import collapseWhitespace from 'strman.collapsewhitespace'
 * ```
 * @param {String} value The input string
 * @example
 * collapseWhitespace('  a  b  c  ')
 * // => 'a b c'
 * @returns {String} The whitespace collapsed string
 */
var collapsewhitespace = (function (value) {
  return trim(replace(value, '\\s\\s+', ' '));
});

/**
 * @module inequal
 * @description
 * The indexOf() method returns the index within the calling String of the first occurrence
 * of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the inequal function
 * ```sh
 * yarn add strman.inequal
 * ```
 * ## Usage
 * ```javascript
 * import { inequal } from 'strman'
 * // OR
 * import inequal from 'strman.inequal'
 * ```
 * @param {String} value The String!
 * @param {String} needle Value to search.
 * @param {Number} [offset = 0] Offset to search.
 * @param {Boolean} [caseSensitive = true] if you use caseSensitive to test.
 * @example
 * indexOf('strman', 'man')
 * // => 3
 * @returns {Number} Return position of the first occurrence of 'needle'.
 */
var indexOf = (function (value, needle) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return toCaseSensitive(value, caseSensitive).indexOf(toCaseSensitive(needle, caseSensitive), offset);
});

var isInteger = function isInteger(value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

var getPosition = function getPosition(value, search, position) {
  if (!isInteger(position) || position > value.length || position < search.length) {
    return value.length - search.length;
  }
  return position - search.length;
};

/**
 * @module endsWith
 * @description
 * Test if `value` ends with `search`
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the endsWith function
 * ```sh
 * yarn add strman.endswith
 * ```
 * ## Usage
 * ```javascript
 * import { endsWith } from 'strman'
 * // OR
 * import endsWith from 'strman.endswith'
 * ```
 * @param {String} value The input string
 * @param {String} search The string to search for
 * @param {Number} [position] The start position/index within `value` to start searching
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @example
 * const value = 'Daniel Leite'
 * const search = 'Leite'
 * endsWith(value, search)
 * // => true
 * @returns {Boolean} True if `value` ends with `search`
 */
var endsWith = (function (value, search) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var newPosition = getPosition(value, search, position);
  var lastIndex = indexOf(value, search, newPosition, caseSensitive);
  return lastIndex !== -1 && lastIndex === newPosition;
});

/**
 * @module ensureRight
 * @description
 * Ensures that the [value] ends with [substr]. If it doesn't, it's appended.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the ensureRight function
 * ```sh
 * yarn add strman.ensureright
 * ```
 * ## Usage
 * ```javascript
 * import { ensureRight } from 'strman'
 * // OR
 * import ensureRight from 'strman.ensureright'
 * ```
 * @param {String} value The input string
 * @param {String} substr The substr to be ensured to be right
 * @param {Boolean} [caseSensitive=true]
 * Use case (in-)sensitive matching for determining if `value` already ends with `substr`
 * @example
 * const value = 'Daniel'
 * const substr = ' Leite'
 * ensureRight(value, substr)
 * // => 'Daniel Leite'
 * @returns {String} The string which is guarenteed to start with `substr`
 */
var ensureright = (function (value, _substr) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!endsWith(value, _substr, 0, caseSensitive)) {
    return append(value, _substr);
  }
  return value;
});

/**
 * @module insert
 * @description
 * Inserts 'substr' into the 'value' at the 'index' provided.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the insert function
 * ```sh
 * yarn add strman.insert
 * ```
 * ## Usage
 * ```javascript
 * import { insert } from 'strman'
 * // OR
 * import insert from 'strman.insert'
 * ```
 * @param {String} value The String!
 * @param {String} substr Value to insert.
 * @param {Number} index Index to insert substr.
 * @example
 * const title = "trman"
 * insert(title, 's', 0)
 * // => 'strman'
 * @returns {String} String with substr added.
 */
var insert = (function (value, substr$$1, index) {
  if (index > value.length) {
    return value;
  }

  var start = substr(value, 0, index);
  var end = substr(value, index, value.length);

  return append(start, substr$$1, end);
});

/**
 * @module toStudlyCaps
 * @description
 * Transform to StudlyCaps.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toStudlyCaps function
 * ```sh
 * yarn add strman.tostudlycaps
 * ```
 * ## Usage
 * ```javascript
 * import { toStudlyCaps } from 'strman'
 * // OR
 * import toStudlyCaps from 'strman.tostudlycaps'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toStudlyCaps(title)
 * // => 'AJavascriptStringManipulationLibrary.'
 * @returns {String} String in StudlyCaps.
 */
var toStudlyCaps = (function (value) {
  var string = value.replace(/[-_\s]+(.)?/g, function (match, chr) {
    return toUpperCase(chr);
  });
  return toUpperCase(string.substr(0, 1)) + string.substr(1);
});

/**
 * @module toLowerCase
 * @description
 * Transform to lowercase.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toLowerCase function
 * ```sh
 * yarn add strman.tolowercase
 * ```
 * ## Usage
 * ```javascript
 * import { toLowerCase } from 'strman'
 * // OR
 * import toLowerCase from 'strman.tolowercase'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toLowerCase(title)
 * // => 'a javascript string manipulation library.'
 * @returns {String}  String in lowercase.
 */
var toLowerCase = (function (value) {
  return value.toLowerCase();
});

/**
 * @module toCamelCase
 * @description
 * Transform to camelCase.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toCamelCase function
 * ```sh
 * yarn add strman.tocamelcase
 * ```
 * ## Usage
 * ```javascript
 * import { toCamelCase } from 'strman'
 * // OR
 * import toCamelCase from 'strman.tocamelcase'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toCamelCase(title)
 * // => 'aJavascriptStringManipulationLibrary'
 * @returns {String}  String in camelCase.
 */
var toCamelCase = (function (value) {
  var string = toStudlyCaps(value);
  return toLowerCase(string.substr(0, 1)) + string.substr(1);
});

// @form
/**
 * @module urlDecode
 * @description
 * Decodes URL-encoded string
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the urlDecode function
 * ```sh
 * yarn add strman.urldecode
 * ```
 * ## Usage
 * ```javascript
 * import { urlDecode } from 'strman'
 * // OR
 * import urlDecode from 'strman.urldecode'
 * ```
 * @param {String} value - The string to be decoded
 * @example
 * urlDecode('https://github.com/dleitee/strman/&name=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA')
 * // => 'https://github.com/dleitee/strman/&name=áéíóú'
 * @returns {String} Returns the decoded string.
 */
var urlDecode = (function (value) {
  return decodeURI(value);
});

/**
 * @module equal
 * @description
 * Tests if two strings are equal.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the equal function
 * ```sh
 * yarn add strman.equal
 * ```
 * ## Usage
 * ```javascript
 * import { equal } from 'strman'
 * // OR
 * import equal from 'strman.equal'
 * ```
 * @param {String} stringA - String for the comparative
 * @param {String} stringB - String to be compared
 * @example
 * equal('foo', 'foo')
 * // => true
 * @returns {Boolean}  `stringA`is equal `stringB`
 */
var equal = (function (stringA, stringB) {
  return stringA === stringB;
});

/**
 * @module compare
 * @description
 * Compares two strings to each other. If they are equivalent, a zero is returned. Otherwise,
 * most of these routines will return a positive or negative result corresponding to whether stringA
 * is lexicographically greater than, or less than, respectively, than stringB.
 *
 * if `stringA` > `stringB` return 1
 *
 * if `stringA` < `stringB` return -1
 *
 * if `stringA` = `stringB` return 0
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the compare function
 * ```sh
 * yarn add strman.compare
 * ```
 * ## Usage
 * ```javascript
 * import { compare } from 'strman'
 * // OR
 * import compare from 'strman.compare'
 * ```
 * @param {String} stringA - String for the comparative
 * @param {String} stringB - String to be compared
 * @example
 * compare('foo', 'bar')
 * // => 1
 * @returns {Number}
 */
var compare = (function (stringA, stringB) {
  if (equal(stringA, stringB)) {
    return 0;
  }
  return stringA > stringB ? 1 : -1;
});

/**
 * @module isLowerCase
 * @description
 * Verify if has lowerCase
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the isLowerCase function
 * ```sh
 * yarn add strman.islowercase
 * ```
 * ## Usage
 * ```javascript
 * import { isLowerCase } from 'strman'
 * // OR
 * import isLowerCase from 'strman.islowercase'
 * ```
 * @param {String} value - The String!
 * @playground
 * const title = 'A Javascript string manipulation library.'
 * isLowerCase(title)
 * // => false
 * @returns {Boolean}  String is lowercase?
 */
var islowercase = (function (value) {
  return value === toLowerCase(value);
});

/**
 * @module removeEmptyStrings
 * @description
 * Remove empty strings from strings array.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the removeEmptyStrings function
 * ```sh
 * yarn add strman.removeemptystrings
 * ```
 * ## Usage
 * ```javascript
 * import { removeEmptyStrings } from 'strman'
 * // OR
 * import removeEmptyStrings from 'strman.removeemptystrings'
 * ```
 * @param {String[]} strings - Array of strings that will be cleaned.
 * @example
 * const titles = ['A Javascript string manipulation library.', null, undefined, '', ' ']
 * removeEmptyStrings(titles)
 * // => ['A Javascript string manipulation library.']
 * @returns {String[]}  Array of strings without empty strings.
 */
var removeemptystrings = (function (strings) {
  return strings.filter(function (string) {
    return string && string !== '';
  });
});

/**
 * @module lastIndefOf
 * @description
 * The lastIndexOf() method returns the index within the calling String object of the last
 * occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the
 * value is not found.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the lastIndefOf function
 * ```sh
 * yarn add strman.lastindexof
 * ```
 * ## Usage
 * ```javascript
 * import { lastIndefOf } from 'strman'
 * // OR
 * import lastIndefOf from 'strman.lastindexof'
 * ```
 * @param {String} value The String!
 * @param {String} needle Value to search.
 * @param {Number} [offset = undefined] Offset to search.
 * @param {Boolean} [caseSensitive = true] if you use caseSensitive to test.
 * @example
 * const title = 'strman strman'
 * result = lastIndexOf(title, 'str')
 * // => 7
 * @returns {Number} Return position of the last occurrence of 'needle'.
 */
var lastIndexOf = (function (value, needle) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return toCaseSensitive(value, caseSensitive).lastIndexOf(toCaseSensitive(needle, caseSensitive), offset);
});

/**
 * @module safeTruncate
 * @description
 * Truncate the string securely, not cutting a word in half. It always returns the last full word.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the safeTruncate function
 * ```sh
 * yarn add strman.safetruncate
 * ```
 * ## Usage
 * ```javascript
 * import { safeTruncate } from 'strman'
 * // OR
 * import safeTruncate from 'strman.safetruncate'
 * ```
 * @param {String} value Value will be truncated securely.
 * @param {Number} length Max size of the returned string.
 * @param {String} [append = ''] Value that will be added to the end of the return string.
 * @example
 * const title = 'A Javascript string manipulation library.'
 * safeTruncate(title, 15, '...');
 * // => 'A Javascript...'
 * @returns {String}  String truncated safely.
 */
var safetruncate = (function (value, length) {
  var append$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  var truncated = '';

  if (length === 0) {
    return '';
  }

  if (length >= value.length) {
    return value;
  }

  var newLength = length - append$$1.length;
  truncated = substr(value, 0, newLength);

  var position = indexOf(value, ' ', newLength - 1);

  if (position !== newLength) {
    var lastPos = lastIndexOf(truncated, ' ');
    truncated = substr(truncated, 0, lastPos);
  }

  return append(truncated, append$$1);
});

/**
 * @module toDecamelize
 * @description
 * Decamelize String
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toDecamelize function
 * ```sh
 * yarn add strman.todecamelize
 * ```
 * ## Usage
 * ```javascript
 * import { toDecamelize } from 'strman'
 * // OR
 * import toDecamelize from 'strman.todecamelize'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toDecamelize(title)
 * // => 'a_javascript_string_manipulation_library.'
 * @returns {String}  String decamelized.
 */
var toDecamelize = (function (value) {
  var chr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';

  var camel = toCamelCase(value);
  var string = camel.replace(/([A-Z])+/g, chr + '$1');
  return toLowerCase(string);
});

// @form
/**
 * @module urlEncode
 * @description
 * Replaces all characters with the appropriate UTF-8 escape sequences.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the urlEncode function
 * ```sh
 * yarn add strman.urlencode
 * ```
 * ## Usage
 * ```javascript
 * import { urlEncode } from 'strman'
 * // OR
 * import urlEncode from 'strman.urlencode'
 * ```
 * @param {String} value - The string to be encoded
 * @example
 * urlEncode('https://github.com/dleitee/strman/&name=áéíóú')
 * // => 'https://github.com/dleitee/strman/&name=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA'
 * @returns {String}  Returns a string in which all non-alphanumeric characters except -_.
 */
var urlencode = (function (value) {
  return encodeURI(value);
});

/**
 * @module contains
 * @description
 * Verifies that the needle is contained in value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the contains function
 * ```sh
 * yarn add strman.contains
 * ```
 * ## Usage
 * ```javascript
 * import { contains } from 'strman'
 * // OR
 * import contains from 'strman.contains'
 * ```
 * @param {String} value The input string
 * @param {String} needle The string which is checked to be contained within `value`
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @example
 * const title = 'Daniel Leite'
 * const needle = 'leite'
 * contains(title, needle, false)
 * // => true
 * @returns {Boolean} True if `needle` is contained
 */
var contains = (function (value, needle) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  return indexOf(value, needle, 0, caseSensitive) > -1;
});

/**
 * @module first
 * @description
 * Return the first 'n' chars of string.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the first function
 * ```sh
 * yarn add strman.first
 * ```
 * ## Usage
 * ```javascript
 * import { first } from 'strman'
 * // OR
 * import first from 'strman.first'
 * ```
 * @param {String} value - The String!
 * @param {Number} n - Number of chars to return.
 * @example
 * first('strman', 3)
 * // => 'str'
 * @returns {String}  Return `n` firsts chars.
 */
var first = (function (value, n) {
  return substr(value, 0, n);
});

/**
 * @module isString
 * @description
 * Checks whether a string.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the isString function
 * ```sh
 * yarn add strman.isstring
 * ```
 * ## Usage
 * ```javascript
 * import { isString } from 'strman'
 * // OR
 * import isString from 'strman.isstring'
 * ```
 * @param {String} value The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * isString(title)
 * // => true
 * @returns {Boolean} if 'value' isString, return true, else false.
 */
var isstring = (function (value) {
  return Object.prototype.toString.call(value) === '[object String]';
});

/**
 * @module removeLeft
 * @description
 * Returns a new string with the 'prefix' removed, if present.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the removeLeft function
 * ```sh
 * yarn add strman.removeleft
 * ```
 * ## Usage
 * ```javascript
 * import { removeLeft } from 'strman'
 * // OR
 * import removeLeft from 'strman.removeleft'
 * ```
 * @param {String} value The String!
 * @param {String} prefix String to remove on left.
 * @param {Boolean} [caseSensitive = true] If you need to caseSensitive.
 * @example
 * const title = 'strman'
 * removeLeft(title, 'str')
 * // => 'man'
 * @returns {String} The String without prefix!
 */
var removeleft = (function (value, prefix) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (startsWith(value, prefix, 0, caseSensitive)) {
    return substr(value, prefix.length);
  }
  return value;
});

/**
 * @module split
 * @description
 * Alias to split function.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the split function
 * ```sh
 * yarn add strman.split
 * ```
 * ## Usage
 * ```javascript
 * import { split } from 'strman'
 * // OR
 * import split from 'strman.split'
 * ```
 * @param {String} value - The String!
 * @param {String} separator - Split separator.
 * @param {Number} limit - Split limit.
 * @example
 * split('strman', '')
 * // => ['s', 't', 'r', 'm', 'a', 'n']
 * @returns {String}  The String splited!
 */
var split = (function (value) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  return value.split(separator, limit);
});

var shuffle = function shuffle() {
  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var j = void 0;
  var i = void 0;
  var newArray = array;
  for (i = array.length; i; i -= 1) {
    j = Math.floor(Math.random() * i);
    newArray[i - 1] = array[j];
    newArray[j] = array[i - 1];
  }
  return newArray;
};

/**
 * @module shuffle
 * @description
 * It returns a string with its characters in random order.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the shuffle function
 * ```sh
 * yarn add strman.shuffle
 * ```
 * ## Usage
 * ```javascript
 * import { shuffle } from 'strman'
 * // OR
 * import shuffle from 'strman.shuffle'
 * ```
 * @param {String} value The String!
 * @example
 * shuffle('strman')
 * // => 'rtmnas'
 * @returns {String} The String shuffled!
 */
var shuffle$1 = (function (value) {
  return shuffle(split(value)).join('');
});

/**
 * @module toKebabCase
 * @description
 * Transform to kebab-case.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toKebabCase function
 * ```sh
 * yarn add strman.tokebabcase
 * ```
 * ## Usage
 * ```javascript
 * import { toKebabCase } from 'strman'
 * // OR
 * import toKebabCase from 'strman.tokebabcase'
 * ```
 * @param {String} value The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toKebabCase(title)
 * // => 'a-javascript-string-manipulation-library.'
 * @returns {String} String in kebab-case.
 */
var tokebabcase = (function (value) {
  return toDecamelize(value, '-');
});

/**
 * @module at
 * @description
 * Get the character at index
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the at function
 * ```sh
 * yarn add strman.at
 * ```
 * ## Usage
 * ```javascript
 * import { at } from 'strman'
 * // OR
 * import at from 'strman.at'
 * ```
 * @param {String} value The input string
 * @param {Number} index The index for which to extract the character
 * @example
 * at('abc', 1)
 * // => 'b'
 * @returns {String} The character at position index
 */
var at = (function (value, index) {
  return substr(value, index, 1);
});

var containsAll = function containsAll(value, caseSensitive, previous, current) {
  if (!contains(value, current, caseSensitive)) {
    return false;
  }
  return previous && true;
};

/**
 * @module containsAll
 * @description
 * Verifies that all needles are contained in value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the containsAll function
 * ```sh
 * yarn add strman.containsall
 * ```
 * ## Usage
 * ```javascript
 * import { containsAll } from 'strman'
 * // OR
 * import containsAll from 'strman.containsall'
 * ```
 * @param {String} value The input string
 * @param {String[]} needles An array of strings which are checked to be contained within `value`
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @example
 * const title = 'Daniel Leite'
 * const needles = ['Leite', 'Daniel']
 * containsAll(title, needles)
 * // => true
 * @returns {Boolean} True if all `needles` are contained
 */
var containsall = (function (value, needles) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (needles.length > 0) {
    return needles.reduce(containsAll.bind(null, value, caseSensitive), true);
  }

  return false;
});

/**
 * @module format
 * @description
 * Formats a string using parameters.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the format function
 * ```sh
 * yarn add strman.format
 * ```
 * ## Usage
 * ```javascript
 * import { format } from 'strman'
 * // OR
 * import format from 'strman.format'
 * ```
 * @param {String} value - Value that will be formatted.
 * @param {String[]} params - Array with the parameters described in the string.
 * @example
 * const select = `SELECT * FROM CONTACTS WHERE NAME LIKE '%{0}%' AND EMAIL LIKE '%{1}%'`
 * format(select, 'DANIEL', 'GMAIL')
 * // => `SELECT * FROM CONTACTS WHERE NAME LIKE '%DANIEL%' AND EMAIL LIKE '%GMAIL%'`
 * @returns {String}  Formatted string.
 */
var format = (function (value) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return replace(value, '{(\\w+)}', function (match, index) {
    if (typeof params[index] !== 'undefined') {
      return params[index];
    }
    return match;
  });
});

/**
 * @module isUpperCase
 * @description
 * Verify if has UPPERCASE
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the isUpperCase function
 * ```sh
 * yarn add strman.isuppercase
 * ```
 * ## Usage
 * ```javascript
 * import { isUpperCase } from 'strman'
 * // OR
 * import isUpperCase from 'strman.isuppercase'
 * ```
 * @param {String} value The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * isUpperCase(title)
 * // => false
 * @returns {Boolean} String is UPPERCASE?.
 */
var isuppercase = (function (value) {
  return value === toUpperCase(value);
});

/**
 * @module removeNonWords
 * @description
 * Remove all non word characters.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the removeNonWords function
 * ```sh
 * yarn add strman.removenowords
 * ```
 * ## Usage
 * ```javascript
 * import { removeNonWords } from 'strman'
 * // OR
 * import removeNonWords from 'strman.removenowords'
 * ```
 * @param {String} value The String!
 * @param {String} [replaced = ''] Value to replace.
 * @example
 * const title = '__strman../'
 * removeNonWords(title)
 * // => 'strman'
 * @returns {String} String without non word characters.
 */
var removenonwords = (function (value) {
  var replaced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return replace(value, '[^\\w]+', replaced);
});

/**
 * @module slugify
 * @description
 * Alias to slice method.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the slugify function
 * ```sh
 * yarn add strman.slugify
 * ```
 * ## Usage
 * ```javascript
 * import { slugify } from 'strman'
 * // OR
 * import slugify from 'strman.slugify'
 * ```
 * @param {String} value The String!
 * @param {Number} beginSlice Start of slice.
 * @param {Number} endSlice End of slice.
 * @example
 * const title = 'strman'
 * slice(title, 2, 5)
 * // => 'rma'
 * @returns {String} The String sliced!
 */
var slice = (function (value, beginSlice) {
  var endSlice = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : beginSlice;
  return value.slice(beginSlice, endSlice);
});

/**
 * @module base64decode
 * @description
 * Decodes data encoded with MIME base64
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the base64decode function
 * ```sh
 * yarn add strman.base64decode
 * ```
 * ## Usage
 * ```javascript
 * import { base64decode } from 'strman'
 * // OR
 * import base64decode from 'strman.base64decode'
 * ```
 * @param {String} value - The data to decode.
 * @example
 * base64Decode('c3RybWFu')
 * // => 'strman'
 * @returns {String} The base64 decoded data.
 */
var base64decode = (function (value) {
  return new Buffer(value, 'base64').toString();
});

var containsAny = function containsAny(value, caseSensitive, previous, current) {
  if (contains(value, current, caseSensitive)) {
    return true;
  }
  return previous;
};

/**
 * @module containsAny
 * @description
 * Verifies that one or more of needles are contained in value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the containsAny function
 * ```sh
 * yarn add strman.containsany
 * ```
 * ## Usage
 * ```javascript
 * import { containsAny } from 'strman'
 * // OR
 * import containsAny from 'strman.containsany'
 * ```
 * @param {String} value The input string
 * @param {String[]} needles An array of string which are checked to be contained within `value`
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @example
 * const title = 'Daniel Leite'
 * const needles = ['Leite', 'Oliveira']
 * containsAny(title, needles)
 * // => true
 * @returns {Boolean} True if at least one of `needles` is contained
 */
var containsany = (function (value, needles) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  return needles.reduce(containsAny.bind(null, value, caseSensitive), false);
});

var BASE_HEXADECIMAL = 16;
var LENGTH_HEXADECIMAL = 4;

var BASE_BINARY = 2;
var LENGTH_BINARY = 16;

var BASE_DECIMAL = 10;
var LENGTH_DECIMAL = 5;

var decode = (function (value, length, base) {
    return value.match(new RegExp('.{1,' + length + '}', 'g')).map(function (string) {
        return String.fromCharCode(parseInt(string, base));
    }).join('');
});

/**
 * @module hexDecode
 * @description
 * Convert hexadecimal unicode (4 digits) string to string chars
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the hexDecode function
 * ```sh
 * yarn add strman.hexdecode
 * ```
 * ## Usage
 * ```javascript
 * import { hexDecode } from 'strman'
 * // OR
 * import hexDecode from 'strman.hexdecode'
 * ```
 * @param {String} value - Value to decode
 * @example
 * hexDecode('007300740072006d0061006e')
 * // => 'strman'
 * @returns {String}  String decoded.
 */
var hexdecode = (function (value) {
  return decode(value, LENGTH_HEXADECIMAL, BASE_HEXADECIMAL);
});

/**
 * @module last
 * @description
 * Return the last 'n' chars of string.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the last function
 * ```sh
 * yarn add strman.last
 * ```
 * ## Usage
 * ```javascript
 * import { last } from 'strman'
 * // OR
 * import last from 'strman.last'
 * ```
 * @param {String} value The String!
 * @param {Number} n Number of chars to return.
 * @example
 * const title = 'strman'
 * last(title, 3)
 * // => 'man'
 * @returns {String} Return 'n' lasts chars.
 */
var last = (function (value, n) {
  return substr(value, -1 * n, n);
});

/**
 * @module removeSpaces
 * @description
 * Returns a new string with the 'suffix' removed, if present.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the removeSpaces function
 * ```sh
 * yarn add strman.removespaces
 * ```
 * ## Usage
 * ```javascript
 * import { removeSpaces } from 'strman'
 * // OR
 * import removeSpaces from 'strman.removespaces'
 * ```
 * @param {String} value The String!
 * @param {String} suffix String to remove on right.
 * @param {Boolean} [caseSensitive = true] If you need to caseSensitive.
 * @example
 * const title = 'strman'
 * removeRight(title, 'man')
 * // => 'str'
 * @returns {String} The String without suffix!
 */
var removeright = (function (value, suffix) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (endsWith(value, suffix, null, caseSensitive)) {
    var length = value.length - suffix.length;
    return substr(value, 0, length);
  }

  return value;
});

/**
 * @module removeSpaces
 * @description
 * Remove all spaces and replace for value.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the removeSpaces function
 * ```sh
 * yarn add strman.removespaces
 * ```
 * ## Usage
 * ```javascript
 * import { removeSpaces } from 'strman'
 * // OR
 * import removeSpaces from 'strman.removespaces'
 * ```
 * @param {String} value - The String!
 * @param {String} replaced - Value to replace.
 * @example
 * const title = '  s t r  m  a n     '
 * removeSpaces(title)
 * // => 'strman'
 * @returns {String}  String without spaces.
 */
var removeSpaces = (function (value) {
  var replaced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return replace(value, '\\s+', replaced);
});

/*
 * Credits for: @danielstjules
 * https://github.com/danielstjules/Stringy/blob/master/src/Stringy.php#L1601-L1756
 */
var ascii = {
  0: ['°', '₀', '۰'],
  1: ['¹', '₁', '۱'],
  2: ['²', '₂', '۲'],
  3: ['³', '₃', '۳'],
  4: ['⁴', '₄', '۴', '٤'],
  5: ['⁵', '₅', '۵', '٥'],
  6: ['⁶', '₆', '۶', '٦'],
  7: ['⁷', '₇', '۷'],
  8: ['⁸', '₈', '۸'],
  9: ['⁹', '₉', '۹'],
  a: ['à', 'á', 'ả', 'ã', 'ạ', 'ă', 'ắ', 'ằ', 'ẳ', 'ẵ', 'ặ', 'â', 'ấ', 'ầ', 'ẩ', 'ẫ', 'ậ', 'ā', 'ą', 'å', 'α', 'ά', 'ἀ', 'ἁ', 'ἂ', 'ἃ', 'ἄ', 'ἅ', 'ἆ', 'ἇ', 'ᾀ', 'ᾁ', 'ᾂ', 'ᾃ', 'ᾄ', 'ᾅ', 'ᾆ', 'ᾇ', 'ὰ', 'ά', 'ᾰ', 'ᾱ', 'ᾲ', 'ᾳ', 'ᾴ', 'ᾶ', 'ᾷ', 'а', 'أ', 'အ', 'ာ', 'ါ', 'ǻ', 'ǎ', 'ª', 'ა', 'अ', 'ا'],
  b: ['б', 'β', 'Ъ', 'Ь', 'ب', 'ဗ', 'ბ'],
  c: ['ç', 'ć', 'č', 'ĉ', 'ċ'],
  d: ['ď', 'ð', 'đ', 'ƌ', 'ȡ', 'ɖ', 'ɗ', 'ᵭ', 'ᶁ', 'ᶑ', 'д', 'δ', 'د', 'ض', 'ဍ', 'ဒ', 'დ'],
  e: ['é', 'è', 'ẻ', 'ẽ', 'ẹ', 'ê', 'ế', 'ề', 'ể', 'ễ', 'ệ', 'ë', 'ē', 'ę', 'ě', 'ĕ', 'ė', 'ε', 'έ', 'ἐ', 'ἑ', 'ἒ', 'ἓ', 'ἔ', 'ἕ', 'ὲ', 'έ', 'е', 'ё', 'э', 'є', 'ə', 'ဧ', 'ေ', 'ဲ', 'ე', 'ए', 'إ', 'ئ'],
  f: ['ф', 'φ', 'ف', 'ƒ', 'ფ'],
  g: ['ĝ', 'ğ', 'ġ', 'ģ', 'г', 'ґ', 'γ', 'ဂ', 'გ', 'گ'],
  h: ['ĥ', 'ħ', 'η', 'ή', 'ح', 'ه', 'ဟ', 'ှ', 'ჰ'],
  i: ['í', 'ì', 'ỉ', 'ĩ', 'ị', 'î', 'ï', 'ī', 'ĭ', 'į', 'ı', 'ι', 'ί', 'ϊ', 'ΐ', 'ἰ', 'ἱ', 'ἲ', 'ἳ', 'ἴ', 'ἵ', 'ἶ', 'ἷ', 'ὶ', 'ί', 'ῐ', 'ῑ', 'ῒ', 'ΐ', 'ῖ', 'ῗ', 'і', 'ї', 'и', 'ဣ', 'ိ', 'ီ', 'ည်', 'ǐ', 'ი', 'इ', 'ی'],
  j: ['ĵ', 'ј', 'Ј', 'ჯ', 'ج'],
  k: ['ķ', 'ĸ', 'к', 'κ', 'Ķ', 'ق', 'ك', 'က', 'კ', 'ქ', 'ک'],
  l: ['ł', 'ľ', 'ĺ', 'ļ', 'ŀ', 'л', 'λ', 'ل', 'လ', 'ლ'],
  m: ['м', 'μ', 'م', 'မ', 'მ'],
  n: ['ñ', 'ń', 'ň', 'ņ', 'ŉ', 'ŋ', 'ν', 'н', 'ن', 'န', 'ნ'],
  o: ['ó', 'ò', 'ỏ', 'õ', 'ọ', 'ô', 'ố', 'ồ', 'ổ', 'ỗ', 'ộ', 'ơ', 'ớ', 'ờ', 'ở', 'ỡ', 'ợ', 'ø', 'ō', 'ő', 'ŏ', 'ο', 'ὀ', 'ὁ', 'ὂ', 'ὃ', 'ὄ', 'ὅ', 'ὸ', 'ό', 'о', 'و', 'θ', 'ို', 'ǒ', 'ǿ', 'º', 'ო', 'ओ'],
  p: ['п', 'π', 'ပ', 'პ', 'پ'],
  q: ['ყ'],
  r: ['ŕ', 'ř', 'ŗ', 'р', 'ρ', 'ر', 'რ'],
  s: ['ś', 'š', 'ş', 'с', 'σ', 'ș', 'ς', 'س', 'ص', 'စ', 'ſ', 'ს'],
  t: ['ť', 'ţ', 'т', 'τ', 'ț', 'ت', 'ط', 'ဋ', 'တ', 'ŧ', 'თ', 'ტ'],
  u: ['ú', 'ù', 'ủ', 'ũ', 'ụ', 'ư', 'ứ', 'ừ', 'ử', 'ữ', 'ự', 'û', 'ū', 'ů', 'ű', 'ŭ', 'ų', 'µ', 'у', 'ဉ', 'ု', 'ူ', 'ǔ', 'ǖ', 'ǘ', 'ǚ', 'ǜ', 'უ', 'उ'],
  v: ['в', 'ვ', 'ϐ'],
  w: ['ŵ', 'ω', 'ώ', 'ဝ', 'ွ'],
  x: ['χ', 'ξ'],
  y: ['ý', 'ỳ', 'ỷ', 'ỹ', 'ỵ', 'ÿ', 'ŷ', 'й', 'ы', 'υ', 'ϋ', 'ύ', 'ΰ', 'ي', 'ယ'],
  z: ['ź', 'ž', 'ż', 'з', 'ζ', 'ز', 'ဇ', 'ზ'],
  aa: ['ع', 'आ', 'آ'],
  ae: ['ä', 'æ', 'ǽ'],
  ai: ['ऐ'],
  at: ['@'],
  ch: ['ч', 'ჩ', 'ჭ', 'چ'],
  dj: ['ђ', 'đ'],
  dz: ['џ', 'ძ'],
  ei: ['ऍ'],
  gh: ['غ', 'ღ'],
  ii: ['ई'],
  ij: ['ĳ'],
  kh: ['х', 'خ', 'ხ'],
  lj: ['љ'],
  nj: ['њ'],
  oe: ['ö', 'œ', 'ؤ'],
  oi: ['ऑ'],
  oii: ['ऒ'],
  ps: ['ψ'],
  sh: ['ш', 'შ', 'ش'],
  shch: ['щ'],
  ss: ['ß'],
  sx: ['ŝ'],
  th: ['þ', 'ϑ', 'ث', 'ذ', 'ظ'],
  ts: ['ц', 'ც', 'წ'],
  ue: ['ü'],
  uu: ['ऊ'],
  ya: ['я'],
  yu: ['ю'],
  zh: ['ж', 'ჟ', 'ژ'],
  '(c)': ['©'],
  A: ['Á', 'À', 'Ả', 'Ã', 'Ạ', 'Ă', 'Ắ', 'Ằ', 'Ẳ', 'Ẵ', 'Ặ', 'Â', 'Ấ', 'Ầ', 'Ẩ', 'Ẫ', 'Ậ', 'Å', 'Ā', 'Ą', 'Α', 'Ά', 'Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ', 'ᾊ', 'ᾋ', 'ᾌ', 'ᾍ', 'ᾎ', 'ᾏ', 'Ᾰ', 'Ᾱ', 'Ὰ', 'Ά', 'ᾼ', 'А', 'Ǻ', 'Ǎ'],
  B: ['Б', 'Β', 'ब'],
  C: ['Ç', 'Ć', 'Č', 'Ĉ', 'Ċ'],
  D: ['Ď', 'Ð', 'Đ', 'Ɖ', 'Ɗ', 'Ƌ', 'ᴅ', 'ᴆ', 'Д', 'Δ'],
  E: ['É', 'È', 'Ẻ', 'Ẽ', 'Ẹ', 'Ê', 'Ế', 'Ề', 'Ể', 'Ễ', 'Ệ', 'Ë', 'Ē', 'Ę', 'Ě', 'Ĕ', 'Ė', 'Ε', 'Έ', 'Ἐ', 'Ἑ', 'Ἒ', 'Ἓ', 'Ἔ', 'Ἕ', 'Έ', 'Ὲ', 'Е', 'Ё', 'Э', 'Є', 'Ə'],
  F: ['Ф', 'Φ'],
  G: ['Ğ', 'Ġ', 'Ģ', 'Г', 'Ґ', 'Γ'],
  H: ['Η', 'Ή', 'Ħ'],
  I: ['Í', 'Ì', 'Ỉ', 'Ĩ', 'Ị', 'Î', 'Ï', 'Ī', 'Ĭ', 'Į', 'İ', 'Ι', 'Ί', 'Ϊ', 'Ἰ', 'Ἱ', 'Ἳ', 'Ἴ', 'Ἵ', 'Ἶ', 'Ἷ', 'Ῐ', 'Ῑ', 'Ὶ', 'Ί', 'И', 'І', 'Ї', 'Ǐ', 'ϒ'],
  K: ['К', 'Κ'],
  L: ['Ĺ', 'Ł', 'Л', 'Λ', 'Ļ', 'Ľ', 'Ŀ', 'ल'],
  M: ['М', 'Μ'],
  N: ['Ń', 'Ñ', 'Ň', 'Ņ', 'Ŋ', 'Н', 'Ν'],
  O: ['Ó', 'Ò', 'Ỏ', 'Õ', 'Ọ', 'Ô', 'Ố', 'Ồ', 'Ổ', 'Ỗ', 'Ộ', 'Ơ', 'Ớ', 'Ờ', 'Ở', 'Ỡ', 'Ợ', 'Ø', 'Ō', 'Ő', 'Ŏ', 'Ο', 'Ό', 'Ὀ', 'Ὁ', 'Ὂ', 'Ὃ', 'Ὄ', 'Ὅ', 'Ὸ', 'Ό', 'О', 'Θ', 'Ө', 'Ǒ', 'Ǿ'],
  P: ['П', 'Π'],
  R: ['Ř', 'Ŕ', 'Р', 'Ρ', 'Ŗ'],
  S: ['Ş', 'Ŝ', 'Ș', 'Š', 'Ś', 'С', 'Σ'],
  T: ['Ť', 'Ţ', 'Ŧ', 'Ț', 'Т', 'Τ'],
  U: ['Ú', 'Ù', 'Ủ', 'Ũ', 'Ụ', 'Ư', 'Ứ', 'Ừ', 'Ử', 'Ữ', 'Ự', 'Û', 'Ū', 'Ů', 'Ű', 'Ŭ', 'Ų', 'У', 'Ǔ', 'Ǖ', 'Ǘ', 'Ǚ', 'Ǜ'],
  V: ['В'],
  W: ['Ω', 'Ώ', 'Ŵ'],
  X: ['Χ', 'Ξ'],
  Y: ['Ý', 'Ỳ', 'Ỷ', 'Ỹ', 'Ỵ', 'Ÿ', 'Ῠ', 'Ῡ', 'Ὺ', 'Ύ', 'Ы', 'Й', 'Υ', 'Ϋ', 'Ŷ'],
  Z: ['Ź', 'Ž', 'Ż', 'З', 'Ζ'],
  AE: ['Ä', 'Æ', 'Ǽ'],
  CH: ['Ч'],
  DJ: ['Ђ'],
  DZ: ['Џ'],
  GX: ['Ĝ'],
  HX: ['Ĥ'],
  IJ: ['Ĳ'],
  JX: ['Ĵ'],
  KH: ['Х'],
  LJ: ['Љ'],
  NJ: ['Њ'],
  OE: ['Ö', 'Œ'],
  PS: ['Ψ'],
  SH: ['Ш'],
  SHCH: ['Щ'],
  SS: ['ẞ'],
  TH: ['Þ'],
  TS: ['Ц'],
  UE: ['Ü'],
  YA: ['Я'],
  YU: ['Ю'],
  ZH: ['Ж'],
  ' ': ["\xC2\xA0", "\xE2\x80\x80", "\xE2\x80\x81", "\xE2\x80\x82", "\xE2\x80\x83", // eslint-disable-line
  "\xE2\x80\x84", "\xE2\x80\x85", "\xE2\x80\x86", "\xE2\x80\x87", "\xE2\x80\x88", // eslint-disable-line
  "\xE2\x80\x89", "\xE2\x80\x8A", "\xE2\x80\xAF", "\xE2\x81\x9F", "\xE3\x80\x80"] // eslint-disable-line
};

/**
 * @module transliterate
 * @description
 * Remove all non valid characters. Example: change á => a or ẽ => e.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the transliterate function
 * ```sh
 * yarn add strman.transliterate
 * ```
 * ## Usage
 * ```javascript
 * import { transliterate } from 'strman'
 * // OR
 * import transliterate from 'strman.transliterate'
 * ```
 * @param {String} value - The String!
 * @example
 * const title = 'strmáñ'
 * transliterate(title)
 * // => 'strman'
 * @returns {String}  String without non valid characters.
 */
var transliterate = (function (value) {
  return Object.keys(ascii).reduce(function (newValue, currentKey) {
    return ascii[currentKey].reduce(function (previous, currentValue) {
      return replace(previous, currentValue, currentKey);
    }, newValue);
  }, value);
});

/**
 * @module slugify
 * @description
 * Converts a value to a slug.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the slugify function
 * ```sh
 * yarn add strman.slugify
 * ```
 * ## Usage
 * ```javascript
 * import { slugify } from 'strman'
 * // OR
 * import slugify from 'strman.slugify'
 * ```
 * @param {String} value The value to slugify
 * @example
 * const title = 'A Javascript string manipulation library.'
 * slugify(title)
 * // => 'a-javascript-string-manipulation-library'
 * @returns {String} The slugified value
 */
var slugify = (function (value) {
  var lowerCaseValue = toLowerCase(value);
  var trimValue = trim(lowerCaseValue);
  var valueWithoutSpaces = removeSpaces(trimValue, '-');
  var valueWithE = replace(valueWithoutSpaces, '&', '-and-');
  var transliterateValue = transliterate(valueWithE);
  var wordsOnlyValue = replace(transliterateValue, '[^\\w\\-]+', '');
  var singleDashesValue = replace(wordsOnlyValue, '-+', '-');
  return trim(singleDashesValue, '-');
});

/**
 * @module toSnakeCase
 * @description
 * Transform to snake_case.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the toSnakeCase function
 * ```sh
 * yarn add strman.tosnakecase
 * ```
 * ## Usage
 * ```javascript
 * import { toSnakeCase } from 'strman'
 * // OR
 * import toSnakeCase from 'strman.tosnakecase'
 * ```
 * @param {String} value The String!
 * @example
 * const title = 'A Javascript string manipulation library.'
 * toSnakeCase(title)
 * // => 'a_javascript_string_manipulation_library.'
 * @returns {String} String in snake_case.
 */
var tosnakecase = (function (value) {
  return toDecamelize(value, '_');
});

/**
 * @module base64encode
 * @description
 * Encodes data with MIME base64.
 *
 * Base64-encoded data takes about 33% more space than the original data.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the base64encode function
 * ```sh
 * yarn add strman.base64encode
 * ```
 * ## Usage
 * ```javascript
 * import { base64encode } from 'strman'
 * // OR
 * import base64encode from 'strman.base64encode'
 * ```
 * @param {String} value - The data to encode.
 * @example
 * base64Encode('strman')
 * // => 'c3RybWFu'
 * @returns {String} The base64 encoded data.
 */
var base64encode = (function (value) {
  return new Buffer(value).toString('base64');
});

var countSubstr = function countSubstr(value, substr) {
  var allowOverlapping = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

  var currentPosition = indexOf(value, substr, position);
  if (currentPosition === -1) {
    return count;
  }
  if (!allowOverlapping) {
    currentPosition += substr.length - 1;
  }
  return countSubstr(value, substr, allowOverlapping, currentPosition + 1, count + 1);
};

/**
 * @module countSubstr
 * @description
 * Count the number of times substr appears in value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the countSubstr function
 * ```sh
 * yarn add strman.countsubstr
 * ```
 * ## Usage
 * ```javascript
 * import { countSubstr } from 'strman'
 * // OR
 * import countSubstr from 'strman.countsubstr'
 * ```
 * @param {String} value The input string
 * @param {String} substr The substring to look for
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @param {Boolean} [allowOverlapping=false] Allow overlapping substrings to be counted
 * @example
 * const title = 'Daniel Leite'
 * const substr = 'Leite'
 * countSubstr(title, substr)
 * // => 1
 * @returns {Number} The number of matches
 */
var countsubstr = (function (value, substr) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var allowOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return countSubstr(toCaseSensitive(value, caseSensitive), toCaseSensitive(substr, caseSensitive), allowOverlapping);
});

/**
 * @module repeat
 * @description
 * Returns a repeated string given a multiplier.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the repeat function
 * ```sh
 * yarn add strman.repeat
 * ```
 * ## Usage
 * ```javascript
 * import { repeat } from 'strman'
 * // OR
 * import repeat from 'strman.repeat'
 * ```
 * @param {String} value - The String!
 * @param {Number} multiplier - Number of repeats.
 * @example
 * const title = 'strman'
 * repeat(title, 5)
 * // => 'strmanstrmanstrmanstrmanstrman'
 * @returns {String}  The String repeated!
 */
var repeat = (function (value, multiplier) {
  var i = 0;
  var result = '';
  while (multiplier > i) {
    result += value;
    i += 1;
  }
  return result;
});

/**
 * @module leftPad
 * @description
 * Returns a new string of a given length such that the beginning of the string is padded.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the leftPad function
 * ```sh
 * yarn add strman.leftpad
 * ```
 * ## Usage
 * ```javascript
 * import { leftPad } from 'strman'
 * // OR
 * import leftPad from 'strman.leftpad'
 * ```
 * @param {String} value - The String!
 * @param {Number} length - Max length of String.
 * @param {Char} [char = ' '] - Char to repeat.
 * @example
 * const title = 'strman'
 * leftPad(title, 10, 0)
 * // => '0000strman'
 * @returns {String}  String pad.
 */
var leftPad = (function (value, length) {
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';

  var result = value;
  var newchar = String(char);

  if (newchar.length > 1) {
    newchar = substr(newchar, 0, 1);
  }

  var newlength = length - value.length;
  result = append(repeat(newchar, newlength), result);

  return result;
});

var encode = (function (value, length, base) {
  return chars(value).map(function (data) {
    return leftPad(data.charCodeAt(0).toString(base), length, '0');
  }).join('');
});

/**
 * @module hexEncode
 * @description
 * Convert string chars to hexadecimal unicode (4 digits)
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the hexEncode function
 * ```sh
 * yarn add strman.hexencode
 * ```
 * ## Usage
 * ```javascript
 * import { hexEncode } from 'strman'
 * // OR
 * import hexEncode from 'strman.hexencode'
 * ```
 * @param {String} value - Value to encode
 * @example
 * hexEncode('strman')
 * // => '007300740072006d0061006e'
 * @returns {String} String in hexadecimal format.
 */
var hexencode = (function (value) {
  return encode(value, LENGTH_HEXADECIMAL, BASE_HEXADECIMAL);
});

var pop = (function (array) {
  return array.slice(0, -1);
});

/**
 * @module between
 * @description
 * Returns array with strings between `start` and `end`
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the between function
 * ```sh
 * yarn add strman.between
 * ```
 * ## Usage
 * ```javascript
 * import { between } from 'strman'
 * // OR
 * import between from 'strman.between'
 * ```
 * @param {String} value Input string
 * @param {String} start The start string to look for
 * @param {String} end The end string to look for
 * @example
 * strman.between('[abc][def]', '[', ']')
 * // => ['abc', 'def']
 * @returns {String[]} An array with all the matches between a pair of `start` and `end`
 */
var between = (function (value, start, end) {
  return pop(split(value, end).map(function (text) {
    return substr(text, indexOf(text, start) + start.length);
  }));
});

/**
 * @module decDecode
 * @description
 * Convert binary unicode (16 digits) string to string chars
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the decDecode function
 * ```sh
 * yarn add strman.decdecode
 * ```
 * ## Usage
 * ```javascript
 * import { decDecode } from 'strman'
 * // OR
 * import decDecode from 'strman.decdecode'
 * ```
 * @param {String} value - Value to decode
 * @example
 * decDecode('001150011600114001090009700110')
 * // => 'strman'
 * @returns {String} String decoded.
 */
var decdecode = (function (value) {
  return decode(value, LENGTH_DECIMAL, BASE_DECIMAL);
});

/**
 * @module binDecode
 * @description
 * Convert binary unicode (16 digits) string to string chars
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the binDecode function
 * ```sh
 * yarn add strman.bindecode
 * ```
 * ## Usage
 * ```javascript
 * import { binDecode } from 'strman'
 * // OR
 * import binDecode from 'strman.bindecode'
 * ```
 * @param {String} value Value to decode
 * @example
 * const binary = '00000000011100110000000001110100000000000111001000000000011011010000000001100001'
 * binDecode(binary)
 * // => 'strman'
 * @returns {String}  String decoded.
 */
var bindecode = (function (value) {
  return decode(value, LENGTH_BINARY, BASE_BINARY);
});

/**
 * @module decEncode
 * @description
 * Convert string chars to decimal unicode (5 digits)
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the decEncode function
 * ```sh
 * yarn add strman.decencode
 * ```
 * ## Usage
 * ```javascript
 * import { decEncode } from 'strman'
 * // OR
 * import decEncode from 'strman.decencode'
 * ```
 * @param {String} value - Value to encode
 * @example
 * decEncode('strman')
 * // => '001150011600114001090009700110'
 * @returns {String} String in decimal format.
 */
var decencode = (function (value) {
  return encode(value, LENGTH_DECIMAL, BASE_DECIMAL);
});

var entitiesDecode = {
  '&AElig': '\xC6',
  '&AElig;': '\xC6',
  '&AMP': '&',
  '&AMP;': '&',
  '&Aacute': '\xC1',
  '&Aacute;': '\xC1',
  '&Abreve;': '\u0102',
  '&Acirc': '\xC2',
  '&Acirc;': '\xC2',
  '&Acy;': '\u0410',
  '&Afr;': '\uD835\uDD04',
  '&Agrave': '\xC0',
  '&Agrave;': '\xC0',
  '&Alpha;': '\u0391',
  '&Amacr;': '\u0100',
  '&And;': '\u2A53',
  '&Aogon;': '\u0104',
  '&Aopf;': '\uD835\uDD38',
  '&ApplyFunction;': '\u2061',
  '&Aring': '\xC5',
  '&Aring;': '\xC5',
  '&Ascr;': '\uD835\uDC9C',
  '&Assign;': '\u2254',
  '&Atilde': '\xC3',
  '&Atilde;': '\xC3',
  '&Auml': '\xC4',
  '&Auml;': '\xC4',
  '&Backslash;': '\u2216',
  '&Barv;': '\u2AE7',
  '&Barwed;': '\u2306',
  '&Bcy;': '\u0411',
  '&Because;': '\u2235',
  '&Bernoullis;': '\u212C',
  '&Beta;': '\u0392',
  '&Bfr;': '\uD835\uDD05',
  '&Bopf;': '\uD835\uDD39',
  '&Breve;': '\u02D8',
  '&Bscr;': '\u212C',
  '&Bumpeq;': '\u224E',
  '&CHcy;': '\u0427',
  '&COPY': '\xA9',
  '&COPY;': '\xA9',
  '&Cacute;': '\u0106',
  '&Cap;': '\u22D2',
  '&CapitalDifferentialD;': '\u2145',
  '&Cayleys;': '\u212D',
  '&Ccaron;': '\u010C',
  '&Ccedil': '\xC7',
  '&Ccedil;': '\xC7',
  '&Ccirc;': '\u0108',
  '&Cconint;': '\u2230',
  '&Cdot;': '\u010A',
  '&Cedilla;': '\xB8',
  '&CenterDot;': '\xB7',
  '&Cfr;': '\u212D',
  '&Chi;': '\u03A7',
  '&CircleDot;': '\u2299',
  '&CircleMinus;': '\u2296',
  '&CirclePlus;': '\u2295',
  '&CircleTimes;': '\u2297',
  '&ClockwiseContourIntegral;': '\u2232',
  '&CloseCurlyDoubleQuote;': '\u201D',
  '&CloseCurlyQuote;': '\u2019',
  '&Colon;': '\u2237',
  '&Colone;': '\u2A74',
  '&Congruent;': '\u2261',
  '&Conint;': '\u222F',
  '&ContourIntegral;': '\u222E',
  '&Copf;': '\u2102',
  '&Coproduct;': '\u2210',
  '&CounterClockwiseContourIntegral;': '\u2233',
  '&Cross;': '\u2A2F',
  '&Cscr;': '\uD835\uDC9E',
  '&Cup;': '\u22D3',
  '&CupCap;': '\u224D',
  '&DD;': '\u2145',
  '&DDotrahd;': '\u2911',
  '&DJcy;': '\u0402',
  '&DScy;': '\u0405',
  '&DZcy;': '\u040F',
  '&Dagger;': '\u2021',
  '&Darr;': '\u21A1',
  '&Dashv;': '\u2AE4',
  '&Dcaron;': '\u010E',
  '&Dcy;': '\u0414',
  '&Del;': '\u2207',
  '&Delta;': '\u0394',
  '&Dfr;': '\uD835\uDD07',
  '&DiacriticalAcute;': '\xB4',
  '&DiacriticalDot;': '\u02D9',
  '&DiacriticalDoubleAcute;': '\u02DD',
  '&DiacriticalGrave;': '`',
  '&DiacriticalTilde;': '\u02DC',
  '&Diamond;': '\u22C4',
  '&DifferentialD;': '\u2146',
  '&Dopf;': '\uD835\uDD3B',
  '&Dot;': '\xA8',
  '&DotDot;': '\u20DC',
  '&DotEqual;': '\u2250',
  '&DoubleContourIntegral;': '\u222F',
  '&DoubleDot;': '\xA8',
  '&DoubleDownArrow;': '\u21D3',
  '&DoubleLeftArrow;': '\u21D0',
  '&DoubleLeftRightArrow;': '\u21D4',
  '&DoubleLeftTee;': '\u2AE4',
  '&DoubleLongLeftArrow;': '\u27F8',
  '&DoubleLongLeftRightArrow;': '\u27FA',
  '&DoubleLongRightArrow;': '\u27F9',
  '&DoubleRightArrow;': '\u21D2',
  '&DoubleRightTee;': '\u22A8',
  '&DoubleUpArrow;': '\u21D1',
  '&DoubleUpDownArrow;': '\u21D5',
  '&DoubleVerticalBar;': '\u2225',
  '&DownArrow;': '\u2193',
  '&DownArrowBar;': '\u2913',
  '&DownArrowUpArrow;': '\u21F5',
  '&DownBreve;': '\u0311',
  '&DownLeftRightVector;': '\u2950',
  '&DownLeftTeeVector;': '\u295E',
  '&DownLeftVector;': '\u21BD',
  '&DownLeftVectorBar;': '\u2956',
  '&DownRightTeeVector;': '\u295F',
  '&DownRightVector;': '\u21C1',
  '&DownRightVectorBar;': '\u2957',
  '&DownTee;': '\u22A4',
  '&DownTeeArrow;': '\u21A7',
  '&Downarrow;': '\u21D3',
  '&Dscr;': '\uD835\uDC9F',
  '&Dstrok;': '\u0110',
  '&ENG;': '\u014A',
  '&ETH': '\xD0',
  '&ETH;': '\xD0',
  '&Eacute': '\xC9',
  '&Eacute;': '\xC9',
  '&Ecaron;': '\u011A',
  '&Ecirc': '\xCA',
  '&Ecirc;': '\xCA',
  '&Ecy;': '\u042D',
  '&Edot;': '\u0116',
  '&Efr;': '\uD835\uDD08',
  '&Egrave': '\xC8',
  '&Egrave;': '\xC8',
  '&Element;': '\u2208',
  '&Emacr;': '\u0112',
  '&EmptySmallSquare;': '\u25FB',
  '&EmptyVerySmallSquare;': '\u25AB',
  '&Eogon;': '\u0118',
  '&Eopf;': '\uD835\uDD3C',
  '&Epsilon;': '\u0395',
  '&Equal;': '\u2A75',
  '&EqualTilde;': '\u2242',
  '&Equilibrium;': '\u21CC',
  '&Escr;': '\u2130',
  '&Esim;': '\u2A73',
  '&Eta;': '\u0397',
  '&Euml': '\xCB',
  '&Euml;': '\xCB',
  '&Exists;': '\u2203',
  '&ExponentialE;': '\u2147',
  '&Fcy;': '\u0424',
  '&Ffr;': '\uD835\uDD09',
  '&FilledSmallSquare;': '\u25FC',
  '&FilledVerySmallSquare;': '\u25AA',
  '&Fopf;': '\uD835\uDD3D',
  '&ForAll;': '\u2200',
  '&Fouriertrf;': '\u2131',
  '&Fscr;': '\u2131',
  '&GJcy;': '\u0403',
  '&GT': '>',
  '&GT;': '>',
  '&Gamma;': '\u0393',
  '&Gammad;': '\u03DC',
  '&Gbreve;': '\u011E',
  '&Gcedil;': '\u0122',
  '&Gcirc;': '\u011C',
  '&Gcy;': '\u0413',
  '&Gdot;': '\u0120',
  '&Gfr;': '\uD835\uDD0A',
  '&Gg;': '\u22D9',
  '&Gopf;': '\uD835\uDD3E',
  '&GreaterEqual;': '\u2265',
  '&GreaterEqualLess;': '\u22DB',
  '&GreaterFullEqual;': '\u2267',
  '&GreaterGreater;': '\u2AA2',
  '&GreaterLess;': '\u2277',
  '&GreaterSlantEqual;': '\u2A7E',
  '&GreaterTilde;': '\u2273',
  '&Gscr;': '\uD835\uDCA2',
  '&Gt;': '\u226B',
  '&HARDcy;': '\u042A',
  '&Hacek;': '\u02C7',
  '&Hat;': '^',
  '&Hcirc;': '\u0124',
  '&Hfr;': '\u210C',
  '&HilbertSpace;': '\u210B',
  '&Hopf;': '\u210D',
  '&HorizontalLine;': '\u2500',
  '&Hscr;': '\u210B',
  '&Hstrok;': '\u0126',
  '&HumpDownHump;': '\u224E',
  '&HumpEqual;': '\u224F',
  '&IEcy;': '\u0415',
  '&IJlig;': '\u0132',
  '&IOcy;': '\u0401',
  '&Iacute': '\xCD',
  '&Iacute;': '\xCD',
  '&Icirc': '\xCE',
  '&Icirc;': '\xCE',
  '&Icy;': '\u0418',
  '&Idot;': '\u0130',
  '&Ifr;': '\u2111',
  '&Igrave': '\xCC',
  '&Igrave;': '\xCC',
  '&Im;': '\u2111',
  '&Imacr;': '\u012A',
  '&ImaginaryI;': '\u2148',
  '&Implies;': '\u21D2',
  '&Int;': '\u222C',
  '&Integral;': '\u222B',
  '&Intersection;': '\u22C2',
  '&InvisibleComma;': '\u2063',
  '&InvisibleTimes;': '\u2062',
  '&Iogon;': '\u012E',
  '&Iopf;': '\uD835\uDD40',
  '&Iota;': '\u0399',
  '&Iscr;': '\u2110',
  '&Itilde;': '\u0128',
  '&Iukcy;': '\u0406',
  '&Iuml': '\xCF',
  '&Iuml;': '\xCF',
  '&Jcirc;': '\u0134',
  '&Jcy;': '\u0419',
  '&Jfr;': '\uD835\uDD0D',
  '&Jopf;': '\uD835\uDD41',
  '&Jscr;': '\uD835\uDCA5',
  '&Jsercy;': '\u0408',
  '&Jukcy;': '\u0404',
  '&KHcy;': '\u0425',
  '&KJcy;': '\u040C',
  '&Kappa;': '\u039A',
  '&Kcedil;': '\u0136',
  '&Kcy;': '\u041A',
  '&Kfr;': '\uD835\uDD0E',
  '&Kopf;': '\uD835\uDD42',
  '&Kscr;': '\uD835\uDCA6',
  '&LJcy;': '\u0409',
  '&LT': '<',
  '&LT;': '<',
  '&Lacute;': '\u0139',
  '&Lambda;': '\u039B',
  '&Lang;': '\u27EA',
  '&Laplacetrf;': '\u2112',
  '&Larr;': '\u219E',
  '&Lcaron;': '\u013D',
  '&Lcedil;': '\u013B',
  '&Lcy;': '\u041B',
  '&LeftAngleBracket;': '\u27E8',
  '&LeftArrow;': '\u2190',
  '&LeftArrowBar;': '\u21E4',
  '&LeftArrowRightArrow;': '\u21C6',
  '&LeftCeiling;': '\u2308',
  '&LeftDoubleBracket;': '\u27E6',
  '&LeftDownTeeVector;': '\u2961',
  '&LeftDownVector;': '\u21C3',
  '&LeftDownVectorBar;': '\u2959',
  '&LeftFloor;': '\u230A',
  '&LeftRightArrow;': '\u2194',
  '&LeftRightVector;': '\u294E',
  '&LeftTee;': '\u22A3',
  '&LeftTeeArrow;': '\u21A4',
  '&LeftTeeVector;': '\u295A',
  '&LeftTriangle;': '\u22B2',
  '&LeftTriangleBar;': '\u29CF',
  '&LeftTriangleEqual;': '\u22B4',
  '&LeftUpDownVector;': '\u2951',
  '&LeftUpTeeVector;': '\u2960',
  '&LeftUpVector;': '\u21BF',
  '&LeftUpVectorBar;': '\u2958',
  '&LeftVector;': '\u21BC',
  '&LeftVectorBar;': '\u2952',
  '&Leftarrow;': '\u21D0',
  '&Leftrightarrow;': '\u21D4',
  '&LessEqualGreater;': '\u22DA',
  '&LessFullEqual;': '\u2266',
  '&LessGreater;': '\u2276',
  '&LessLess;': '\u2AA1',
  '&LessSlantEqual;': '\u2A7D',
  '&LessTilde;': '\u2272',
  '&Lfr;': '\uD835\uDD0F',
  '&Ll;': '\u22D8',
  '&Lleftarrow;': '\u21DA',
  '&Lmidot;': '\u013F',
  '&LongLeftArrow;': '\u27F5',
  '&LongLeftRightArrow;': '\u27F7',
  '&LongRightArrow;': '\u27F6',
  '&Longleftarrow;': '\u27F8',
  '&Longleftrightarrow;': '\u27FA',
  '&Longrightarrow;': '\u27F9',
  '&Lopf;': '\uD835\uDD43',
  '&LowerLeftArrow;': '\u2199',
  '&LowerRightArrow;': '\u2198',
  '&Lscr;': '\u2112',
  '&Lsh;': '\u21B0',
  '&Lstrok;': '\u0141',
  '&Lt;': '\u226A',
  '&Map;': '\u2905',
  '&Mcy;': '\u041C',
  '&MediumSpace;': '\u205F',
  '&Mellintrf;': '\u2133',
  '&Mfr;': '\uD835\uDD10',
  '&MinusPlus;': '\u2213',
  '&Mopf;': '\uD835\uDD44',
  '&Mscr;': '\u2133',
  '&Mu;': '\u039C',
  '&NJcy;': '\u040A',
  '&Nacute;': '\u0143',
  '&Ncaron;': '\u0147',
  '&Ncedil;': '\u0145',
  '&Ncy;': '\u041D',
  '&NegativeMediumSpace;': '\u200B',
  '&NegativeThickSpace;': '\u200B',
  '&NegativeThinSpace;': '\u200B',
  '&NegativeVeryThinSpace;': '\u200B',
  '&NestedGreaterGreater;': '\u226B',
  '&NestedLessLess;': '\u226A',
  '&NewLine;': '\n',
  '&Nfr;': '\uD835\uDD11',
  '&NoBreak;': '\u2060',
  '&NonBreakingSpace;': '\xA0',
  '&Nopf;': '\u2115',
  '&Not;': '\u2AEC',
  '&NotCongruent;': '\u2262',
  '&NotCupCap;': '\u226D',
  '&NotDoubleVerticalBar;': '\u2226',
  '&NotElement;': '\u2209',
  '&NotEqual;': '\u2260',
  '&NotEqualTilde;': '\u2242\u0338',
  '&NotExists;': '\u2204',
  '&NotGreater;': '\u226F',
  '&NotGreaterEqual;': '\u2271',
  '&NotGreaterFullEqual;': '\u2267\u0338',
  '&NotGreaterGreater;': '\u226B\u0338',
  '&NotGreaterLess;': '\u2279',
  '&NotGreaterSlantEqual;': '\u2A7E\u0338',
  '&NotGreaterTilde;': '\u2275',
  '&NotHumpDownHump;': '\u224E\u0338',
  '&NotHumpEqual;': '\u224F\u0338',
  '&NotLeftTriangle;': '\u22EA',
  '&NotLeftTriangleBar;': '\u29CF\u0338',
  '&NotLeftTriangleEqual;': '\u22EC',
  '&NotLess;': '\u226E',
  '&NotLessEqual;': '\u2270',
  '&NotLessGreater;': '\u2278',
  '&NotLessLess;': '\u226A\u0338',
  '&NotLessSlantEqual;': '\u2A7D\u0338',
  '&NotLessTilde;': '\u2274',
  '&NotNestedGreaterGreater;': '\u2AA2\u0338',
  '&NotNestedLessLess;': '\u2AA1\u0338',
  '&NotPrecedes;': '\u2280',
  '&NotPrecedesEqual;': '\u2AAF\u0338',
  '&NotPrecedesSlantEqual;': '\u22E0',
  '&NotReverseElement;': '\u220C',
  '&NotRightTriangle;': '\u22EB',
  '&NotRightTriangleBar;': '\u29D0\u0338',
  '&NotRightTriangleEqual;': '\u22ED',
  '&NotSquareSubset;': '\u228F\u0338',
  '&NotSquareSubsetEqual;': '\u22E2',
  '&NotSquareSuperset;': '\u2290\u0338',
  '&NotSquareSupersetEqual;': '\u22E3',
  '&NotSubset;': '\u2282\u20D2',
  '&NotSubsetEqual;': '\u2288',
  '&NotSucceeds;': '\u2281',
  '&NotSucceedsEqual;': '\u2AB0\u0338',
  '&NotSucceedsSlantEqual;': '\u22E1',
  '&NotSucceedsTilde;': '\u227F\u0338',
  '&NotSuperset;': '\u2283\u20D2',
  '&NotSupersetEqual;': '\u2289',
  '&NotTilde;': '\u2241',
  '&NotTildeEqual;': '\u2244',
  '&NotTildeFullEqual;': '\u2247',
  '&NotTildeTilde;': '\u2249',
  '&NotVerticalBar;': '\u2224',
  '&Nscr;': '\uD835\uDCA9',
  '&Ntilde': '\xD1',
  '&Ntilde;': '\xD1',
  '&Nu;': '\u039D',
  '&OElig;': '\u0152',
  '&Oacute': '\xD3',
  '&Oacute;': '\xD3',
  '&Ocirc': '\xD4',
  '&Ocirc;': '\xD4',
  '&Ocy;': '\u041E',
  '&Odblac;': '\u0150',
  '&Ofr;': '\uD835\uDD12',
  '&Ograve': '\xD2',
  '&Ograve;': '\xD2',
  '&Omacr;': '\u014C',
  '&Omega;': '\u03A9',
  '&Omicron;': '\u039F',
  '&Oopf;': '\uD835\uDD46',
  '&OpenCurlyDoubleQuote;': '\u201C',
  '&OpenCurlyQuote;': '\u2018',
  '&Or;': '\u2A54',
  '&Oscr;': '\uD835\uDCAA',
  '&Oslash': '\xD8',
  '&Oslash;': '\xD8',
  '&Otilde': '\xD5',
  '&Otilde;': '\xD5',
  '&Otimes;': '\u2A37',
  '&Ouml': '\xD6',
  '&Ouml;': '\xD6',
  '&OverBar;': '\u203E',
  '&OverBrace;': '\u23DE',
  '&OverBracket;': '\u23B4',
  '&OverParenthesis;': '\u23DC',
  '&PartialD;': '\u2202',
  '&Pcy;': '\u041F',
  '&Pfr;': '\uD835\uDD13',
  '&Phi;': '\u03A6',
  '&Pi;': '\u03A0',
  '&PlusMinus;': '\xB1',
  '&Poincareplane;': '\u210C',
  '&Popf;': '\u2119',
  '&Pr;': '\u2ABB',
  '&Precedes;': '\u227A',
  '&PrecedesEqual;': '\u2AAF',
  '&PrecedesSlantEqual;': '\u227C',
  '&PrecedesTilde;': '\u227E',
  '&Prime;': '\u2033',
  '&Product;': '\u220F',
  '&Proportion;': '\u2237',
  '&Proportional;': '\u221D',
  '&Pscr;': '\uD835\uDCAB',
  '&Psi;': '\u03A8',
  '&QUOT': '"',
  '&QUOT;': '"',
  '&Qfr;': '\uD835\uDD14',
  '&Qopf;': '\u211A',
  '&Qscr;': '\uD835\uDCAC',
  '&RBarr;': '\u2910',
  '&REG': '\xAE',
  '&REG;': '\xAE',
  '&Racute;': '\u0154',
  '&Rang;': '\u27EB',
  '&Rarr;': '\u21A0',
  '&Rarrtl;': '\u2916',
  '&Rcaron;': '\u0158',
  '&Rcedil;': '\u0156',
  '&Rcy;': '\u0420',
  '&Re;': '\u211C',
  '&ReverseElement;': '\u220B',
  '&ReverseEquilibrium;': '\u21CB',
  '&ReverseUpEquilibrium;': '\u296F',
  '&Rfr;': '\u211C',
  '&Rho;': '\u03A1',
  '&RightAngleBracket;': '\u27E9',
  '&RightArrow;': '\u2192',
  '&RightArrowBar;': '\u21E5',
  '&RightArrowLeftArrow;': '\u21C4',
  '&RightCeiling;': '\u2309',
  '&RightDoubleBracket;': '\u27E7',
  '&RightDownTeeVector;': '\u295D',
  '&RightDownVector;': '\u21C2',
  '&RightDownVectorBar;': '\u2955',
  '&RightFloor;': '\u230B',
  '&RightTee;': '\u22A2',
  '&RightTeeArrow;': '\u21A6',
  '&RightTeeVector;': '\u295B',
  '&RightTriangle;': '\u22B3',
  '&RightTriangleBar;': '\u29D0',
  '&RightTriangleEqual;': '\u22B5',
  '&RightUpDownVector;': '\u294F',
  '&RightUpTeeVector;': '\u295C',
  '&RightUpVector;': '\u21BE',
  '&RightUpVectorBar;': '\u2954',
  '&RightVector;': '\u21C0',
  '&RightVectorBar;': '\u2953',
  '&Rightarrow;': '\u21D2',
  '&Ropf;': '\u211D',
  '&RoundImplies;': '\u2970',
  '&Rrightarrow;': '\u21DB',
  '&Rscr;': '\u211B',
  '&Rsh;': '\u21B1',
  '&RuleDelayed;': '\u29F4',
  '&SHCHcy;': '\u0429',
  '&SHcy;': '\u0428',
  '&SOFTcy;': '\u042C',
  '&Sacute;': '\u015A',
  '&Sc;': '\u2ABC',
  '&Scaron;': '\u0160',
  '&Scedil;': '\u015E',
  '&Scirc;': '\u015C',
  '&Scy;': '\u0421',
  '&Sfr;': '\uD835\uDD16',
  '&ShortDownArrow;': '\u2193',
  '&ShortLeftArrow;': '\u2190',
  '&ShortRightArrow;': '\u2192',
  '&ShortUpArrow;': '\u2191',
  '&Sigma;': '\u03A3',
  '&SmallCircle;': '\u2218',
  '&Sopf;': '\uD835\uDD4A',
  '&Sqrt;': '\u221A',
  '&Square;': '\u25A1',
  '&SquareIntersection;': '\u2293',
  '&SquareSubset;': '\u228F',
  '&SquareSubsetEqual;': '\u2291',
  '&SquareSuperset;': '\u2290',
  '&SquareSupersetEqual;': '\u2292',
  '&SquareUnion;': '\u2294',
  '&Sscr;': '\uD835\uDCAE',
  '&Star;': '\u22C6',
  '&Sub;': '\u22D0',
  '&Subset;': '\u22D0',
  '&SubsetEqual;': '\u2286',
  '&Succeeds;': '\u227B',
  '&SucceedsEqual;': '\u2AB0',
  '&SucceedsSlantEqual;': '\u227D',
  '&SucceedsTilde;': '\u227F',
  '&SuchThat;': '\u220B',
  '&Sum;': '\u2211',
  '&Sup;': '\u22D1',
  '&Superset;': '\u2283',
  '&SupersetEqual;': '\u2287',
  '&Supset;': '\u22D1',
  '&THORN': '\xDE',
  '&THORN;': '\xDE',
  '&TRADE;': '\u2122',
  '&TSHcy;': '\u040B',
  '&TScy;': '\u0426',
  '&Tab;': '\t',
  '&Tau;': '\u03A4',
  '&Tcaron;': '\u0164',
  '&Tcedil;': '\u0162',
  '&Tcy;': '\u0422',
  '&Tfr;': '\uD835\uDD17',
  '&Therefore;': '\u2234',
  '&Theta;': '\u0398',
  '&ThickSpace;': '\u205F\u200A',
  '&ThinSpace;': '\u2009',
  '&Tilde;': '\u223C',
  '&TildeEqual;': '\u2243',
  '&TildeFullEqual;': '\u2245',
  '&TildeTilde;': '\u2248',
  '&Topf;': '\uD835\uDD4B',
  '&TripleDot;': '\u20DB',
  '&Tscr;': '\uD835\uDCAF',
  '&Tstrok;': '\u0166',
  '&Uacute': '\xDA',
  '&Uacute;': '\xDA',
  '&Uarr;': '\u219F',
  '&Uarrocir;': '\u2949',
  '&Ubrcy;': '\u040E',
  '&Ubreve;': '\u016C',
  '&Ucirc': '\xDB',
  '&Ucirc;': '\xDB',
  '&Ucy;': '\u0423',
  '&Udblac;': '\u0170',
  '&Ufr;': '\uD835\uDD18',
  '&Ugrave': '\xD9',
  '&Ugrave;': '\xD9',
  '&Umacr;': '\u016A',
  '&UnderBar;': '_',
  '&UnderBrace;': '\u23DF',
  '&UnderBracket;': '\u23B5',
  '&UnderParenthesis;': '\u23DD',
  '&Union;': '\u22C3',
  '&UnionPlus;': '\u228E',
  '&Uogon;': '\u0172',
  '&Uopf;': '\uD835\uDD4C',
  '&UpArrow;': '\u2191',
  '&UpArrowBar;': '\u2912',
  '&UpArrowDownArrow;': '\u21C5',
  '&UpDownArrow;': '\u2195',
  '&UpEquilibrium;': '\u296E',
  '&UpTee;': '\u22A5',
  '&UpTeeArrow;': '\u21A5',
  '&Uparrow;': '\u21D1',
  '&Updownarrow;': '\u21D5',
  '&UpperLeftArrow;': '\u2196',
  '&UpperRightArrow;': '\u2197',
  '&Upsi;': '\u03D2',
  '&Upsilon;': '\u03A5',
  '&Uring;': '\u016E',
  '&Uscr;': '\uD835\uDCB0',
  '&Utilde;': '\u0168',
  '&Uuml': '\xDC',
  '&Uuml;': '\xDC',
  '&VDash;': '\u22AB',
  '&Vbar;': '\u2AEB',
  '&Vcy;': '\u0412',
  '&Vdash;': '\u22A9',
  '&Vdashl;': '\u2AE6',
  '&Vee;': '\u22C1',
  '&Verbar;': '\u2016',
  '&Vert;': '\u2016',
  '&VerticalBar;': '\u2223',
  '&VerticalLine;': '|',
  '&VerticalSeparator;': '\u2758',
  '&VerticalTilde;': '\u2240',
  '&VeryThinSpace;': '\u200A',
  '&Vfr;': '\uD835\uDD19',
  '&Vopf;': '\uD835\uDD4D',
  '&Vscr;': '\uD835\uDCB1',
  '&Vvdash;': '\u22AA',
  '&Wcirc;': '\u0174',
  '&Wedge;': '\u22C0',
  '&Wfr;': '\uD835\uDD1A',
  '&Wopf;': '\uD835\uDD4E',
  '&Wscr;': '\uD835\uDCB2',
  '&Xfr;': '\uD835\uDD1B',
  '&Xi;': '\u039E',
  '&Xopf;': '\uD835\uDD4F',
  '&Xscr;': '\uD835\uDCB3',
  '&YAcy;': '\u042F',
  '&YIcy;': '\u0407',
  '&YUcy;': '\u042E',
  '&Yacute': '\xDD',
  '&Yacute;': '\xDD',
  '&Ycirc;': '\u0176',
  '&Ycy;': '\u042B',
  '&Yfr;': '\uD835\uDD1C',
  '&Yopf;': '\uD835\uDD50',
  '&Yscr;': '\uD835\uDCB4',
  '&Yuml;': '\u0178',
  '&ZHcy;': '\u0416',
  '&Zacute;': '\u0179',
  '&Zcaron;': '\u017D',
  '&Zcy;': '\u0417',
  '&Zdot;': '\u017B',
  '&ZeroWidthSpace;': '\u200B',
  '&Zeta;': '\u0396',
  '&Zfr;': '\u2128',
  '&Zopf;': '\u2124',
  '&Zscr;': '\uD835\uDCB5',
  '&aacute;': '\xE1',
  '&abreve;': '\u0103',
  '&ac;': '\u223E',
  '&acE;': '\u223E\u0333',
  '&acd;': '\u223F',
  '&acirc': '\xE2',
  '&acirc;': '\xE2',
  '&acute': '\xB4',
  '&acute;': '\xB4',
  '&acy;': '\u0430',
  '&aelig': '\xE6',
  '&aelig;': '\xE6',
  '&af;': '\u2061',
  '&afr;': '\uD835\uDD1E',
  '&agrave': '\xE0',
  '&agrave;': '\xE0',
  '&alefsym;': '\u2135',
  '&aleph;': '\u2135',
  '&alpha;': '\u03B1',
  '&amacr;': '\u0101',
  '&amalg;': '\u2A3F',
  '&amp': '&',
  '&amp;': '&',
  '&and;': '\u2227',
  '&andand;': '\u2A55',
  '&andd;': '\u2A5C',
  '&andslope;': '\u2A58',
  '&andv;': '\u2A5A',
  '&ang;': '\u2220',
  '&ange;': '\u29A4',
  '&angle;': '\u2220',
  '&angmsd;': '\u2221',
  '&angmsdaa;': '\u29A8',
  '&angmsdab;': '\u29A9',
  '&angmsdac;': '\u29AA',
  '&angmsdad;': '\u29AB',
  '&angmsdae;': '\u29AC',
  '&angmsdaf;': '\u29AD',
  '&angmsdag;': '\u29AE',
  '&angmsdah;': '\u29AF',
  '&angrt;': '\u221F',
  '&angrtvb;': '\u22BE',
  '&angrtvbd;': '\u299D',
  '&angsph;': '\u2222',
  '&angst;': '\xC5',
  '&angzarr;': '\u237C',
  '&aogon;': '\u0105',
  '&aopf;': '\uD835\uDD52',
  '&ap;': '\u2248',
  '&apE;': '\u2A70',
  '&apacir;': '\u2A6F',
  '&ape;': '\u224A',
  '&apid;': '\u224B',
  '&apos;': '\'',
  '&approx;': '\u2248',
  '&approxeq;': '\u224A',
  '&aring': '\xE5',
  '&aring;': '\xE5',
  '&ascr;': '\uD835\uDCB6',
  '&ast;': '*',
  '&asymp;': '\u2248',
  '&asympeq;': '\u224D',
  '&atilde': '\xE3',
  '&atilde;': '\xE3',
  '&auml': '\xE4',
  '&auml;': '\xE4',
  '&awconint;': '\u2233',
  '&awint;': '\u2A11',
  '&bNot;': '\u2AED',
  '&backcong;': '\u224C',
  '&backepsilon;': '\u03F6',
  '&backprime;': '\u2035',
  '&backsim;': '\u223D',
  '&backsimeq;': '\u22CD',
  '&barvee;': '\u22BD',
  '&barwed;': '\u2305',
  '&barwedge;': '\u2305',
  '&bbrk;': '\u23B5',
  '&bbrktbrk;': '\u23B6',
  '&bcong;': '\u224C',
  '&bcy;': '\u0431',
  '&bdquo;': '\u201E',
  '&becaus;': '\u2235',
  '&because;': '\u2235',
  '&bemptyv;': '\u29B0',
  '&bepsi;': '\u03F6',
  '&bernou;': '\u212C',
  '&beta;': '\u03B2',
  '&beth;': '\u2136',
  '&between;': '\u226C',
  '&bfr;': '\uD835\uDD1F',
  '&bigcap;': '\u22C2',
  '&bigcirc;': '\u25EF',
  '&bigcup;': '\u22C3',
  '&bigodot;': '\u2A00',
  '&bigoplus;': '\u2A01',
  '&bigotimes;': '\u2A02',
  '&bigsqcup;': '\u2A06',
  '&bigstar;': '\u2605',
  '&bigtriangledown;': '\u25BD',
  '&bigtriangleup;': '\u25B3',
  '&biguplus;': '\u2A04',
  '&bigvee;': '\u22C1',
  '&bigwedge;': '\u22C0',
  '&bkarow;': '\u290D',
  '&blacklozenge;': '\u29EB',
  '&blacksquare;': '\u25AA',
  '&blacktriangle;': '\u25B4',
  '&blacktriangledown;': '\u25BE',
  '&blacktriangleleft;': '\u25C2',
  '&blacktriangleright;': '\u25B8',
  '&blank;': '\u2423',
  '&blk12;': '\u2592',
  '&blk14;': '\u2591',
  '&blk34;': '\u2593',
  '&block;': '\u2588',
  '&bne;': '=\u20E5',
  '&bnequiv;': '\u2261\u20E5',
  '&bnot;': '\u2310',
  '&bopf;': '\uD835\uDD53',
  '&bot;': '\u22A5',
  '&bottom;': '\u22A5',
  '&bowtie;': '\u22C8',
  '&boxDL;': '\u2557',
  '&boxDR;': '\u2554',
  '&boxDl;': '\u2556',
  '&boxDr;': '\u2553',
  '&boxH;': '\u2550',
  '&boxHD;': '\u2566',
  '&boxHU;': '\u2569',
  '&boxHd;': '\u2564',
  '&boxHu;': '\u2567',
  '&boxUL;': '\u255D',
  '&boxUR;': '\u255A',
  '&boxUl;': '\u255C',
  '&boxUr;': '\u2559',
  '&boxV;': '\u2551',
  '&boxVH;': '\u256C',
  '&boxVL;': '\u2563',
  '&boxVR;': '\u2560',
  '&boxVh;': '\u256B',
  '&boxVl;': '\u2562',
  '&boxVr;': '\u255F',
  '&boxbox;': '\u29C9',
  '&boxdL;': '\u2555',
  '&boxdR;': '\u2552',
  '&boxdl;': '\u2510',
  '&boxdr;': '\u250C',
  '&boxh;': '\u2500',
  '&boxhD;': '\u2565',
  '&boxhU;': '\u2568',
  '&boxhd;': '\u252C',
  '&boxhu;': '\u2534',
  '&boxminus;': '\u229F',
  '&boxplus;': '\u229E',
  '&boxtimes;': '\u22A0',
  '&boxuL;': '\u255B',
  '&boxuR;': '\u2558',
  '&boxul;': '\u2518',
  '&boxur;': '\u2514',
  '&boxv;': '\u2502',
  '&boxvH;': '\u256A',
  '&boxvL;': '\u2561',
  '&boxvR;': '\u255E',
  '&boxvh;': '\u253C',
  '&boxvl;': '\u2524',
  '&boxvr;': '\u251C',
  '&bprime;': '\u2035',
  '&breve;': '\u02D8',
  '&brvbar': '\xA6',
  '&brvbar;': '\xA6',
  '&bscr;': '\uD835\uDCB7',
  '&bsemi;': '\u204F',
  '&bsim;': '\u223D',
  '&bsime;': '\u22CD',
  '&bsol;': '\\',
  '&bsolb;': '\u29C5',
  '&bsolhsub;': '\u27C8',
  '&bull;': '\u2022',
  '&bullet;': '\u2022',
  '&bump;': '\u224E',
  '&bumpE;': '\u2AAE',
  '&bumpe;': '\u224F',
  '&bumpeq;': '\u224F',
  '&cacute;': '\u0107',
  '&cap;': '\u2229',
  '&capand;': '\u2A44',
  '&capbrcup;': '\u2A49',
  '&capcap;': '\u2A4B',
  '&capcup;': '\u2A47',
  '&capdot;': '\u2A40',
  '&caps;': '\u2229\uFE00',
  '&caret;': '\u2041',
  '&caron;': '\u02C7',
  '&ccaps;': '\u2A4D',
  '&ccaron;': '\u010D',
  '&ccedil': '\xE7',
  '&ccedil;': '\xE7',
  '&ccirc;': '\u0109',
  '&ccups;': '\u2A4C',
  '&ccupssm;': '\u2A50',
  '&cdot;': '\u010B',
  '&cedil': '\xB8',
  '&cedil;': '\xB8',
  '&cemptyv;': '\u29B2',
  '&cent': '\xA2',
  '&cent;': '\xA2',
  '&centerdot;': '\xB7',
  '&cfr;': '\uD835\uDD20',
  '&chcy;': '\u0447',
  '&check;': '\u2713',
  '&checkmark;': '\u2713',
  '&chi;': '\u03C7',
  '&cir;': '\u25CB',
  '&cirE;': '\u29C3',
  '&circ;': '\u02C6',
  '&circeq;': '\u2257',
  '&circlearrowleft;': '\u21BA',
  '&circlearrowright;': '\u21BB',
  '&circledR;': '\xAE',
  '&circledS;': '\u24C8',
  '&circledast;': '\u229B',
  '&circledcirc;': '\u229A',
  '&circleddash;': '\u229D',
  '&cire;': '\u2257',
  '&cirfnint;': '\u2A10',
  '&cirmid;': '\u2AEF',
  '&cirscir;': '\u29C2',
  '&clubs;': '\u2663',
  '&clubsuit;': '\u2663',
  '&colon;': ':',
  '&colone;': '\u2254',
  '&coloneq;': '\u2254',
  '&comma;': ',',
  '&commat;': '@',
  '&comp;': '\u2201',
  '&compfn;': '\u2218',
  '&complement;': '\u2201',
  '&complexes;': '\u2102',
  '&cong;': '\u2245',
  '&congdot;': '\u2A6D',
  '&conint;': '\u222E',
  '&copf;': '\uD835\uDD54',
  '&coprod;': '\u2210',
  '&copy': '\xA9',
  '&copy;': '\xA9',
  '&copysr;': '\u2117',
  '&crarr;': '\u21B5',
  '&cross;': '\u2717',
  '&cscr;': '\uD835\uDCB8',
  '&csub;': '\u2ACF',
  '&csube;': '\u2AD1',
  '&csup;': '\u2AD0',
  '&csupe;': '\u2AD2',
  '&ctdot;': '\u22EF',
  '&cudarrl;': '\u2938',
  '&cudarrr;': '\u2935',
  '&cuepr;': '\u22DE',
  '&cuesc;': '\u22DF',
  '&cularr;': '\u21B6',
  '&cularrp;': '\u293D',
  '&cup;': '\u222A',
  '&cupbrcap;': '\u2A48',
  '&cupcap;': '\u2A46',
  '&cupcup;': '\u2A4A',
  '&cupdot;': '\u228D',
  '&cupor;': '\u2A45',
  '&cups;': '\u222A\uFE00',
  '&curarr;': '\u21B7',
  '&curarrm;': '\u293C',
  '&curlyeqprec;': '\u22DE',
  '&curlyeqsucc;': '\u22DF',
  '&curlyvee;': '\u22CE',
  '&curlywedge;': '\u22CF',
  '&curren': '\xA4',
  '&curren;': '\xA4',
  '&curvearrowleft;': '\u21B6',
  '&curvearrowright;': '\u21B7',
  '&cuvee;': '\u22CE',
  '&cuwed;': '\u22CF',
  '&cwconint;': '\u2232',
  '&cwint;': '\u2231',
  '&cylcty;': '\u232D',
  '&dArr;': '\u21D3',
  '&dHar;': '\u2965',
  '&dagger;': '\u2020',
  '&daleth;': '\u2138',
  '&darr;': '\u2193',
  '&dash;': '\u2010',
  '&dashv;': '\u22A3',
  '&dbkarow;': '\u290F',
  '&dblac;': '\u02DD',
  '&dcaron;': '\u010F',
  '&dcy;': '\u0434',
  '&dd;': '\u2146',
  '&ddagger;': '\u2021',
  '&ddarr;': '\u21CA',
  '&ddotseq;': '\u2A77',
  '&deg': '\xB0',
  '&deg;': '\xB0',
  '&delta;': '\u03B4',
  '&demptyv;': '\u29B1',
  '&dfisht;': '\u297F',
  '&dfr;': '\uD835\uDD21',
  '&dharl;': '\u21C3',
  '&dharr;': '\u21C2',
  '&diam;': '\u22C4',
  '&diamond;': '\u22C4',
  '&diamondsuit;': '\u2666',
  '&diams;': '\u2666',
  '&die;': '\xA8',
  '&digamma;': '\u03DD',
  '&disin;': '\u22F2',
  '&div;': '\xF7',
  '&divide': '\xF7',
  '&divide;': '\xF7',
  '&divideontimes;': '\u22C7',
  '&divonx;': '\u22C7',
  '&djcy;': '\u0452',
  '&dlcorn;': '\u231E',
  '&dlcrop;': '\u230D',
  '&dollar;': '$',
  '&dopf;': '\uD835\uDD55',
  '&dot;': '\u02D9',
  '&doteq;': '\u2250',
  '&doteqdot;': '\u2251',
  '&dotminus;': '\u2238',
  '&dotplus;': '\u2214',
  '&dotsquare;': '\u22A1',
  '&doublebarwedge;': '\u2306',
  '&downarrow;': '\u2193',
  '&downdownarrows;': '\u21CA',
  '&downharpoonleft;': '\u21C3',
  '&downharpoonright;': '\u21C2',
  '&drbkarow;': '\u2910',
  '&drcorn;': '\u231F',
  '&drcrop;': '\u230C',
  '&dscr;': '\uD835\uDCB9',
  '&dscy;': '\u0455',
  '&dsol;': '\u29F6',
  '&dstrok;': '\u0111',
  '&dtdot;': '\u22F1',
  '&dtri;': '\u25BF',
  '&dtrif;': '\u25BE',
  '&duarr;': '\u21F5',
  '&duhar;': '\u296F',
  '&dwangle;': '\u29A6',
  '&dzcy;': '\u045F',
  '&dzigrarr;': '\u27FF',
  '&eDDot;': '\u2A77',
  '&eDot;': '\u2251',
  '&eacute;': '\xE9',
  '&easter;': '\u2A6E',
  '&ecaron;': '\u011B',
  '&ecir;': '\u2256',
  '&ecirc': '\xEA',
  '&ecirc;': '\xEA',
  '&ecolon;': '\u2255',
  '&ecy;': '\u044D',
  '&edot;': '\u0117',
  '&ee;': '\u2147',
  '&efDot;': '\u2252',
  '&efr;': '\uD835\uDD22',
  '&eg;': '\u2A9A',
  '&egrave': '\xE8',
  '&egrave;': '\xE8',
  '&egs;': '\u2A96',
  '&egsdot;': '\u2A98',
  '&el;': '\u2A99',
  '&elinters;': '\u23E7',
  '&ell;': '\u2113',
  '&els;': '\u2A95',
  '&elsdot;': '\u2A97',
  '&emacr;': '\u0113',
  '&empty;': '\u2205',
  '&emptyset;': '\u2205',
  '&emptyv;': '\u2205',
  '&emsp13;': '\u2004',
  '&emsp14;': '\u2005',
  '&emsp;': '\u2003',
  '&eng;': '\u014B',
  '&ensp;': '\u2002',
  '&eogon;': '\u0119',
  '&eopf;': '\uD835\uDD56',
  '&epar;': '\u22D5',
  '&eparsl;': '\u29E3',
  '&eplus;': '\u2A71',
  '&epsi;': '\u03B5',
  '&epsilon;': '\u03B5',
  '&epsiv;': '\u03F5',
  '&eqcirc;': '\u2256',
  '&eqcolon;': '\u2255',
  '&eqsim;': '\u2242',
  '&eqslantgtr;': '\u2A96',
  '&eqslantless;': '\u2A95',
  '&equals;': '=',
  '&equest;': '\u225F',
  '&equiv;': '\u2261',
  '&equivDD;': '\u2A78',
  '&eqvparsl;': '\u29E5',
  '&erDot;': '\u2253',
  '&erarr;': '\u2971',
  '&escr;': '\u212F',
  '&esdot;': '\u2250',
  '&esim;': '\u2242',
  '&eta;': '\u03B7',
  '&eth': '\xF0',
  '&eth;': '\xF0',
  '&euml': '\xEB',
  '&euml;': '\xEB',
  '&euro;': '\u20AC',
  '&excl;': '!',
  '&exist;': '\u2203',
  '&expectation;': '\u2130',
  '&exponentiale;': '\u2147',
  '&fallingdotseq;': '\u2252',
  '&fcy;': '\u0444',
  '&female;': '\u2640',
  '&ffilig;': '\uFB03',
  '&fflig;': '\uFB00',
  '&ffllig;': '\uFB04',
  '&ffr;': '\uD835\uDD23',
  '&filig;': '\uFB01',
  '&fjlig;': 'fj',
  '&flat;': '\u266D',
  '&fllig;': '\uFB02',
  '&fltns;': '\u25B1',
  '&fnof;': '\u0192',
  '&fopf;': '\uD835\uDD57',
  '&forall;': '\u2200',
  '&fork;': '\u22D4',
  '&forkv;': '\u2AD9',
  '&fpartint;': '\u2A0D',
  '&frac12': '\xBD',
  '&frac12;': '\xBD',
  '&frac13;': '\u2153',
  '&frac14': '\xBC',
  '&frac14;': '\xBC',
  '&frac15;': '\u2155',
  '&frac16;': '\u2159',
  '&frac18;': '\u215B',
  '&frac23;': '\u2154',
  '&frac25;': '\u2156',
  '&frac34': '\xBE',
  '&frac34;': '\xBE',
  '&frac35;': '\u2157',
  '&frac38;': '\u215C',
  '&frac45;': '\u2158',
  '&frac56;': '\u215A',
  '&frac58;': '\u215D',
  '&frac78;': '\u215E',
  '&frasl;': '\u2044',
  '&frown;': '\u2322',
  '&fscr;': '\uD835\uDCBB',
  '&gE;': '\u2267',
  '&gEl;': '\u2A8C',
  '&gacute;': '\u01F5',
  '&gamma;': '\u03B3',
  '&gammad;': '\u03DD',
  '&gap;': '\u2A86',
  '&gbreve;': '\u011F',
  '&gcirc;': '\u011D',
  '&gcy;': '\u0433',
  '&gdot;': '\u0121',
  '&ge;': '\u2265',
  '&gel;': '\u22DB',
  '&geq;': '\u2265',
  '&geqq;': '\u2267',
  '&geqslant;': '\u2A7E',
  '&ges;': '\u2A7E',
  '&gescc;': '\u2AA9',
  '&gesdot;': '\u2A80',
  '&gesdoto;': '\u2A82',
  '&gesdotol;': '\u2A84',
  '&gesl;': '\u22DB\uFE00',
  '&gesles;': '\u2A94',
  '&gfr;': '\uD835\uDD24',
  '&gg;': '\u226B',
  '&ggg;': '\u22D9',
  '&gimel;': '\u2137',
  '&gjcy;': '\u0453',
  '&gl;': '\u2277',
  '&glE;': '\u2A92',
  '&gla;': '\u2AA5',
  '&glj;': '\u2AA4',
  '&gnE;': '\u2269',
  '&gnap;': '\u2A8A',
  '&gnapprox;': '\u2A8A',
  '&gne;': '\u2A88',
  '&gneq;': '\u2A88',
  '&gneqq;': '\u2269',
  '&gnsim;': '\u22E7',
  '&gopf;': '\uD835\uDD58',
  '&grave;': '`',
  '&gscr;': '\u210A',
  '&gsim;': '\u2273',
  '&gsime;': '\u2A8E',
  '&gsiml;': '\u2A90',
  '&gt': '>',
  '&gt;': '>',
  '&gtcc;': '\u2AA7',
  '&gtcir;': '\u2A7A',
  '&gtdot;': '\u22D7',
  '&gtlPar;': '\u2995',
  '&gtquest;': '\u2A7C',
  '&gtrapprox;': '\u2A86',
  '&gtrarr;': '\u2978',
  '&gtrdot;': '\u22D7',
  '&gtreqless;': '\u22DB',
  '&gtreqqless;': '\u2A8C',
  '&gtrless;': '\u2277',
  '&gtrsim;': '\u2273',
  '&gvertneqq;': '\u2269\uFE00',
  '&gvnE;': '\u2269\uFE00',
  '&hArr;': '\u21D4',
  '&hairsp;': '\u200A',
  '&half;': '\xBD',
  '&hamilt;': '\u210B',
  '&hardcy;': '\u044A',
  '&harr;': '\u2194',
  '&harrcir;': '\u2948',
  '&harrw;': '\u21AD',
  '&hbar;': '\u210F',
  '&hcirc;': '\u0125',
  '&hearts;': '\u2665',
  '&heartsuit;': '\u2665',
  '&hellip;': '\u2026',
  '&hercon;': '\u22B9',
  '&hfr;': '\uD835\uDD25',
  '&hksearow;': '\u2925',
  '&hkswarow;': '\u2926',
  '&hoarr;': '\u21FF',
  '&homtht;': '\u223B',
  '&hookleftarrow;': '\u21A9',
  '&hookrightarrow;': '\u21AA',
  '&hopf;': '\uD835\uDD59',
  '&horbar;': '\u2015',
  '&hscr;': '\uD835\uDCBD',
  '&hslash;': '\u210F',
  '&hstrok;': '\u0127',
  '&hybull;': '\u2043',
  '&hyphen;': '\u2010',
  '&iacute': '\xED',
  '&iacute;': '\xED',
  '&ic;': '\u2063',
  '&icirc': '\xEE',
  '&icirc;': '\xEE',
  '&icy;': '\u0438',
  '&iecy;': '\u0435',
  '&iexcl': '\xA1',
  '&iexcl;': '\xA1',
  '&iff;': '\u21D4',
  '&ifr;': '\uD835\uDD26',
  '&igrave': '\xEC',
  '&igrave;': '\xEC',
  '&ii;': '\u2148',
  '&iiiint;': '\u2A0C',
  '&iiint;': '\u222D',
  '&iinfin;': '\u29DC',
  '&iiota;': '\u2129',
  '&ijlig;': '\u0133',
  '&imacr;': '\u012B',
  '&image;': '\u2111',
  '&imagline;': '\u2110',
  '&imagpart;': '\u2111',
  '&imath;': '\u0131',
  '&imof;': '\u22B7',
  '&imped;': '\u01B5',
  '&in;': '\u2208',
  '&incare;': '\u2105',
  '&infin;': '\u221E',
  '&infintie;': '\u29DD',
  '&inodot;': '\u0131',
  '&int;': '\u222B',
  '&intcal;': '\u22BA',
  '&integers;': '\u2124',
  '&intercal;': '\u22BA',
  '&intlarhk;': '\u2A17',
  '&intprod;': '\u2A3C',
  '&iocy;': '\u0451',
  '&iogon;': '\u012F',
  '&iopf;': '\uD835\uDD5A',
  '&iota;': '\u03B9',
  '&iprod;': '\u2A3C',
  '&iquest': '\xBF',
  '&iquest;': '\xBF',
  '&iscr;': '\uD835\uDCBE',
  '&isin;': '\u2208',
  '&isinE;': '\u22F9',
  '&isindot;': '\u22F5',
  '&isins;': '\u22F4',
  '&isinsv;': '\u22F3',
  '&isinv;': '\u2208',
  '&it;': '\u2062',
  '&itilde;': '\u0129',
  '&iukcy;': '\u0456',
  '&iuml': '\xEF',
  '&iuml;': '\xEF',
  '&jcirc;': '\u0135',
  '&jcy;': '\u0439',
  '&jfr;': '\uD835\uDD27',
  '&jmath;': '\u0237',
  '&jopf;': '\uD835\uDD5B',
  '&jscr;': '\uD835\uDCBF',
  '&jsercy;': '\u0458',
  '&jukcy;': '\u0454',
  '&kappa;': '\u03BA',
  '&kappav;': '\u03F0',
  '&kcedil;': '\u0137',
  '&kcy;': '\u043A',
  '&kfr;': '\uD835\uDD28',
  '&kgreen;': '\u0138',
  '&khcy;': '\u0445',
  '&kjcy;': '\u045C',
  '&kopf;': '\uD835\uDD5C',
  '&kscr;': '\uD835\uDCC0',
  '&lAarr;': '\u21DA',
  '&lArr;': '\u21D0',
  '&lAtail;': '\u291B',
  '&lBarr;': '\u290E',
  '&lE;': '\u2266',
  '&lEg;': '\u2A8B',
  '&lHar;': '\u2962',
  '&lacute;': '\u013A',
  '&laemptyv;': '\u29B4',
  '&lagran;': '\u2112',
  '&lambda;': '\u03BB',
  '&lang;': '\u27E8',
  '&langd;': '\u2991',
  '&langle;': '\u27E8',
  '&lap;': '\u2A85',
  '&laquo': '\xAB',
  '&laquo;': '\xAB',
  '&larr;': '\u2190',
  '&larrb;': '\u21E4',
  '&larrbfs;': '\u291F',
  '&larrfs;': '\u291D',
  '&larrhk;': '\u21A9',
  '&larrlp;': '\u21AB',
  '&larrpl;': '\u2939',
  '&larrsim;': '\u2973',
  '&larrtl;': '\u21A2',
  '&lat;': '\u2AAB',
  '&latail;': '\u2919',
  '&late;': '\u2AAD',
  '&lates;': '\u2AAD\uFE00',
  '&lbarr;': '\u290C',
  '&lbbrk;': '\u2772',
  '&lbrace;': '{',
  '&lbrack;': '[',
  '&lbrke;': '\u298B',
  '&lbrksld;': '\u298F',
  '&lbrkslu;': '\u298D',
  '&lcaron;': '\u013E',
  '&lcedil;': '\u013C',
  '&lceil;': '\u2308',
  '&lcub;': '{',
  '&lcy;': '\u043B',
  '&ldca;': '\u2936',
  '&ldquo;': '\u201C',
  '&ldquor;': '\u201E',
  '&ldrdhar;': '\u2967',
  '&ldrushar;': '\u294B',
  '&ldsh;': '\u21B2',
  '&le;': '\u2264',
  '&leftarrow;': '\u2190',
  '&leftarrowtail;': '\u21A2',
  '&leftharpoondown;': '\u21BD',
  '&leftharpoonup;': '\u21BC',
  '&leftleftarrows;': '\u21C7',
  '&leftrightarrow;': '\u2194',
  '&leftrightarrows;': '\u21C6',
  '&leftrightharpoons;': '\u21CB',
  '&leftrightsquigarrow;': '\u21AD',
  '&leftthreetimes;': '\u22CB',
  '&leg;': '\u22DA',
  '&leq;': '\u2264',
  '&leqq;': '\u2266',
  '&leqslant;': '\u2A7D',
  '&les;': '\u2A7D',
  '&lescc;': '\u2AA8',
  '&lesdot;': '\u2A7F',
  '&lesdoto;': '\u2A81',
  '&lesdotor;': '\u2A83',
  '&lesg;': '\u22DA\uFE00',
  '&lesges;': '\u2A93',
  '&lessapprox;': '\u2A85',
  '&lessdot;': '\u22D6',
  '&lesseqgtr;': '\u22DA',
  '&lesseqqgtr;': '\u2A8B',
  '&lessgtr;': '\u2276',
  '&lesssim;': '\u2272',
  '&lfisht;': '\u297C',
  '&lfloor;': '\u230A',
  '&lfr;': '\uD835\uDD29',
  '&lg;': '\u2276',
  '&lgE;': '\u2A91',
  '&lhard;': '\u21BD',
  '&lharu;': '\u21BC',
  '&lharul;': '\u296A',
  '&lhblk;': '\u2584',
  '&ljcy;': '\u0459',
  '&ll;': '\u226A',
  '&llarr;': '\u21C7',
  '&llcorner;': '\u231E',
  '&llhard;': '\u296B',
  '&lltri;': '\u25FA',
  '&lmidot;': '\u0140',
  '&lmoust;': '\u23B0',
  '&lmoustache;': '\u23B0',
  '&lnE;': '\u2268',
  '&lnap;': '\u2A89',
  '&lnapprox;': '\u2A89',
  '&lne;': '\u2A87',
  '&lneq;': '\u2A87',
  '&lneqq;': '\u2268',
  '&lnsim;': '\u22E6',
  '&loang;': '\u27EC',
  '&loarr;': '\u21FD',
  '&lobrk;': '\u27E6',
  '&longleftarrow;': '\u27F5',
  '&longleftrightarrow;': '\u27F7',
  '&longmapsto;': '\u27FC',
  '&longrightarrow;': '\u27F6',
  '&looparrowleft;': '\u21AB',
  '&looparrowright;': '\u21AC',
  '&lopar;': '\u2985',
  '&lopf;': '\uD835\uDD5D',
  '&loplus;': '\u2A2D',
  '&lotimes;': '\u2A34',
  '&lowast;': '\u2217',
  '&lowbar;': '_',
  '&loz;': '\u25CA',
  '&lozenge;': '\u25CA',
  '&lozf;': '\u29EB',
  '&lpar;': '(',
  '&lparlt;': '\u2993',
  '&lrarr;': '\u21C6',
  '&lrcorner;': '\u231F',
  '&lrhar;': '\u21CB',
  '&lrhard;': '\u296D',
  '&lrm;': '\u200E',
  '&lrtri;': '\u22BF',
  '&lsaquo;': '\u2039',
  '&lscr;': '\uD835\uDCC1',
  '&lsh;': '\u21B0',
  '&lsim;': '\u2272',
  '&lsime;': '\u2A8D',
  '&lsimg;': '\u2A8F',
  '&lsqb;': '[',
  '&lsquo;': '\u2018',
  '&lsquor;': '\u201A',
  '&lstrok;': '\u0142',
  '&lt': '<',
  '&lt;': '<',
  '&ltcc;': '\u2AA6',
  '&ltcir;': '\u2A79',
  '&ltdot;': '\u22D6',
  '&lthree;': '\u22CB',
  '&ltimes;': '\u22C9',
  '&ltlarr;': '\u2976',
  '&ltquest;': '\u2A7B',
  '&ltrPar;': '\u2996',
  '&ltri;': '\u25C3',
  '&ltrie;': '\u22B4',
  '&ltrif;': '\u25C2',
  '&lurdshar;': '\u294A',
  '&luruhar;': '\u2966',
  '&lvertneqq;': '\u2268\uFE00',
  '&lvnE;': '\u2268\uFE00',
  '&mDDot;': '\u223A',
  '&macr': '\xAF',
  '&macr;': '\xAF',
  '&male;': '\u2642',
  '&malt;': '\u2720',
  '&maltese;': '\u2720',
  '&map;': '\u21A6',
  '&mapsto;': '\u21A6',
  '&mapstodown;': '\u21A7',
  '&mapstoleft;': '\u21A4',
  '&mapstoup;': '\u21A5',
  '&marker;': '\u25AE',
  '&mcomma;': '\u2A29',
  '&mcy;': '\u043C',
  '&mdash;': '\u2014',
  '&measuredangle;': '\u2221',
  '&mfr;': '\uD835\uDD2A',
  '&mho;': '\u2127',
  '&micro': '\xB5',
  '&micro;': '\xB5',
  '&mid;': '\u2223',
  '&midast;': '*',
  '&midcir;': '\u2AF0',
  '&middot': '\xB7',
  '&middot;': '\xB7',
  '&minus;': '\u2212',
  '&minusb;': '\u229F',
  '&minusd;': '\u2238',
  '&minusdu;': '\u2A2A',
  '&mlcp;': '\u2ADB',
  '&mldr;': '\u2026',
  '&mnplus;': '\u2213',
  '&models;': '\u22A7',
  '&mopf;': '\uD835\uDD5E',
  '&mp;': '\u2213',
  '&mscr;': '\uD835\uDCC2',
  '&mstpos;': '\u223E',
  '&mu;': '\u03BC',
  '&multimap;': '\u22B8',
  '&mumap;': '\u22B8',
  '&nGg;': '\u22D9\u0338',
  '&nGt;': '\u226B\u20D2',
  '&nGtv;': '\u226B\u0338',
  '&nLeftarrow;': '\u21CD',
  '&nLeftrightarrow;': '\u21CE',
  '&nLl;': '\u22D8\u0338',
  '&nLt;': '\u226A\u20D2',
  '&nLtv;': '\u226A\u0338',
  '&nRightarrow;': '\u21CF',
  '&nVDash;': '\u22AF',
  '&nVdash;': '\u22AE',
  '&nabla;': '\u2207',
  '&nacute;': '\u0144',
  '&nang;': '\u2220\u20D2',
  '&nap;': '\u2249',
  '&napE;': '\u2A70\u0338',
  '&napid;': '\u224B\u0338',
  '&napos;': '\u0149',
  '&napprox;': '\u2249',
  '&natur;': '\u266E',
  '&natural;': '\u266E',
  '&naturals;': '\u2115',
  '&nbsp': '\xA0',
  '&nbsp;': '\xA0',
  '&nbump;': '\u224E\u0338',
  '&nbumpe;': '\u224F\u0338',
  '&ncap;': '\u2A43',
  '&ncaron;': '\u0148',
  '&ncedil;': '\u0146',
  '&ncong;': '\u2247',
  '&ncongdot;': '\u2A6D\u0338',
  '&ncup;': '\u2A42',
  '&ncy;': '\u043D',
  '&ndash;': '\u2013',
  '&ne;': '\u2260',
  '&neArr;': '\u21D7',
  '&nearhk;': '\u2924',
  '&nearr;': '\u2197',
  '&nearrow;': '\u2197',
  '&nedot;': '\u2250\u0338',
  '&nequiv;': '\u2262',
  '&nesear;': '\u2928',
  '&nesim;': '\u2242\u0338',
  '&nexist;': '\u2204',
  '&nexists;': '\u2204',
  '&nfr;': '\uD835\uDD2B',
  '&ngE;': '\u2267\u0338',
  '&nge;': '\u2271',
  '&ngeq;': '\u2271',
  '&ngeqq;': '\u2267\u0338',
  '&ngeqslant;': '\u2A7E\u0338',
  '&nges;': '\u2A7E\u0338',
  '&ngsim;': '\u2275',
  '&ngt;': '\u226F',
  '&ngtr;': '\u226F',
  '&nhArr;': '\u21CE',
  '&nharr;': '\u21AE',
  '&nhpar;': '\u2AF2',
  '&ni;': '\u220B',
  '&nis;': '\u22FC',
  '&nisd;': '\u22FA',
  '&niv;': '\u220B',
  '&njcy;': '\u045A',
  '&nlArr;': '\u21CD',
  '&nlE;': '\u2266\u0338',
  '&nlarr;': '\u219A',
  '&nldr;': '\u2025',
  '&nle;': '\u2270',
  '&nleftarrow;': '\u219A',
  '&nleftrightarrow;': '\u21AE',
  '&nleq;': '\u2270',
  '&nleqq;': '\u2266\u0338',
  '&nleqslant;': '\u2A7D\u0338',
  '&nles;': '\u2A7D\u0338',
  '&nless;': '\u226E',
  '&nlsim;': '\u2274',
  '&nlt;': '\u226E',
  '&nltri;': '\u22EA',
  '&nltrie;': '\u22EC',
  '&nmid;': '\u2224',
  '&nopf;': '\uD835\uDD5F',
  '&not': '\xAC',
  '&not;': '\xAC',
  '&notin;': '\u2209',
  '&notinE;': '\u22F9\u0338',
  '&notindot;': '\u22F5\u0338',
  '&notinva;': '\u2209',
  '&notinvb;': '\u22F7',
  '&notinvc;': '\u22F6',
  '&notni;': '\u220C',
  '&notniva;': '\u220C',
  '&notnivb;': '\u22FE',
  '&notnivc;': '\u22FD',
  '&npar;': '\u2226',
  '&nparallel;': '\u2226',
  '&nparsl;': '\u2AFD\u20E5',
  '&npart;': '\u2202\u0338',
  '&npolint;': '\u2A14',
  '&npr;': '\u2280',
  '&nprcue;': '\u22E0',
  '&npre;': '\u2AAF\u0338',
  '&nprec;': '\u2280',
  '&npreceq;': '\u2AAF\u0338',
  '&nrArr;': '\u21CF',
  '&nrarr;': '\u219B',
  '&nrarrc;': '\u2933\u0338',
  '&nrarrw;': '\u219D\u0338',
  '&nrightarrow;': '\u219B',
  '&nrtri;': '\u22EB',
  '&nrtrie;': '\u22ED',
  '&nsc;': '\u2281',
  '&nsccue;': '\u22E1',
  '&nsce;': '\u2AB0\u0338',
  '&nscr;': '\uD835\uDCC3',
  '&nshortmid;': '\u2224',
  '&nshortparallel;': '\u2226',
  '&nsim;': '\u2241',
  '&nsime;': '\u2244',
  '&nsimeq;': '\u2244',
  '&nsmid;': '\u2224',
  '&nspar;': '\u2226',
  '&nsqsube;': '\u22E2',
  '&nsqsupe;': '\u22E3',
  '&nsub;': '\u2284',
  '&nsubE;': '\u2AC5\u0338',
  '&nsube;': '\u2288',
  '&nsubset;': '\u2282\u20D2',
  '&nsubseteq;': '\u2288',
  '&nsubseteqq;': '\u2AC5\u0338',
  '&nsucc;': '\u2281',
  '&nsucceq;': '\u2AB0\u0338',
  '&nsup;': '\u2285',
  '&nsupE;': '\u2AC6\u0338',
  '&nsupe;': '\u2289',
  '&nsupset;': '\u2283\u20D2',
  '&nsupseteq;': '\u2289',
  '&nsupseteqq;': '\u2AC6\u0338',
  '&ntgl;': '\u2279',
  '&ntilde': '\xF1',
  '&ntilde;': '\xF1',
  '&ntlg;': '\u2278',
  '&ntriangleleft;': '\u22EA',
  '&ntrianglelefteq;': '\u22EC',
  '&ntriangleright;': '\u22EB',
  '&ntrianglerighteq;': '\u22ED',
  '&nu;': '\u03BD',
  '&num;': '#',
  '&numero;': '\u2116',
  '&numsp;': '\u2007',
  '&nvDash;': '\u22AD',
  '&nvHarr;': '\u2904',
  '&nvap;': '\u224D\u20D2',
  '&nvdash;': '\u22AC',
  '&nvge;': '\u2265\u20D2',
  '&nvgt;': '>\u20D2',
  '&nvinfin;': '\u29DE',
  '&nvlArr;': '\u2902',
  '&nvle;': '\u2264\u20D2',
  '&nvlt;': '<\u20D2',
  '&nvltrie;': '\u22B4\u20D2',
  '&nvrArr;': '\u2903',
  '&nvrtrie;': '\u22B5\u20D2',
  '&nvsim;': '\u223C\u20D2',
  '&nwArr;': '\u21D6',
  '&nwarhk;': '\u2923',
  '&nwarr;': '\u2196',
  '&nwarrow;': '\u2196',
  '&nwnear;': '\u2927',
  '&oS;': '\u24C8',
  '&oacute': '\xF3',
  '&oacute;': '\xF3',
  '&oast;': '\u229B',
  '&ocir;': '\u229A',
  '&ocirc': '\xF4',
  '&ocirc;': '\xF4',
  '&ocy;': '\u043E',
  '&odash;': '\u229D',
  '&odblac;': '\u0151',
  '&odiv;': '\u2A38',
  '&odot;': '\u2299',
  '&odsold;': '\u29BC',
  '&oelig;': '\u0153',
  '&ofcir;': '\u29BF',
  '&ofr;': '\uD835\uDD2C',
  '&ogon;': '\u02DB',
  '&ograve': '\xF2',
  '&ograve;': '\xF2',
  '&ogt;': '\u29C1',
  '&ohbar;': '\u29B5',
  '&ohm;': '\u03A9',
  '&oint;': '\u222E',
  '&olarr;': '\u21BA',
  '&olcir;': '\u29BE',
  '&olcross;': '\u29BB',
  '&oline;': '\u203E',
  '&olt;': '\u29C0',
  '&omacr;': '\u014D',
  '&omega;': '\u03C9',
  '&omicron;': '\u03BF',
  '&omid;': '\u29B6',
  '&ominus;': '\u2296',
  '&oopf;': '\uD835\uDD60',
  '&opar;': '\u29B7',
  '&operp;': '\u29B9',
  '&oplus;': '\u2295',
  '&or;': '\u2228',
  '&orarr;': '\u21BB',
  '&ord;': '\u2A5D',
  '&order;': '\u2134',
  '&orderof;': '\u2134',
  '&ordf': '\xAA',
  '&ordf;': '\xAA',
  '&ordm': '\xBA',
  '&ordm;': '\xBA',
  '&origof;': '\u22B6',
  '&oror;': '\u2A56',
  '&orslope;': '\u2A57',
  '&orv;': '\u2A5B',
  '&oscr;': '\u2134',
  '&oslash': '\xF8',
  '&oslash;': '\xF8',
  '&osol;': '\u2298',
  '&otilde': '\xF5',
  '&otilde;': '\xF5',
  '&otimes;': '\u2297',
  '&otimesas;': '\u2A36',
  '&ouml': '\xF6',
  '&ouml;': '\xF6',
  '&ovbar;': '\u233D',
  '&par;': '\u2225',
  '&para': '\xB6',
  '&para;': '\xB6',
  '&parallel;': '\u2225',
  '&parsim;': '\u2AF3',
  '&parsl;': '\u2AFD',
  '&part;': '\u2202',
  '&pcy;': '\u043F',
  '&percnt;': '%',
  '&period;': '.',
  '&permil;': '\u2030',
  '&perp;': '\u22A5',
  '&pertenk;': '\u2031',
  '&pfr;': '\uD835\uDD2D',
  '&phi;': '\u03C6',
  '&phiv;': '\u03D5',
  '&phmmat;': '\u2133',
  '&phone;': '\u260E',
  '&pi;': '\u03C0',
  '&pitchfork;': '\u22D4',
  '&piv;': '\u03D6',
  '&planck;': '\u210F',
  '&planckh;': '\u210E',
  '&plankv;': '\u210F',
  '&plus;': '+',
  '&plusacir;': '\u2A23',
  '&plusb;': '\u229E',
  '&pluscir;': '\u2A22',
  '&plusdo;': '\u2214',
  '&plusdu;': '\u2A25',
  '&pluse;': '\u2A72',
  '&plusmn': '\xB1',
  '&plusmn;': '\xB1',
  '&plussim;': '\u2A26',
  '&plustwo;': '\u2A27',
  '&pm;': '\xB1',
  '&pointint;': '\u2A15',
  '&popf;': '\uD835\uDD61',
  '&pound': '\xA3',
  '&pound;': '\xA3',
  '&pr;': '\u227A',
  '&prE;': '\u2AB3',
  '&prap;': '\u2AB7',
  '&prcue;': '\u227C',
  '&pre;': '\u2AAF',
  '&prec;': '\u227A',
  '&precapprox;': '\u2AB7',
  '&preccurlyeq;': '\u227C',
  '&preceq;': '\u2AAF',
  '&precnapprox;': '\u2AB9',
  '&precneqq;': '\u2AB5',
  '&precnsim;': '\u22E8',
  '&precsim;': '\u227E',
  '&prime;': '\u2032',
  '&primes;': '\u2119',
  '&prnE;': '\u2AB5',
  '&prnap;': '\u2AB9',
  '&prnsim;': '\u22E8',
  '&prod;': '\u220F',
  '&profalar;': '\u232E',
  '&profline;': '\u2312',
  '&profsurf;': '\u2313',
  '&prop;': '\u221D',
  '&propto;': '\u221D',
  '&prsim;': '\u227E',
  '&prurel;': '\u22B0',
  '&pscr;': '\uD835\uDCC5',
  '&psi;': '\u03C8',
  '&puncsp;': '\u2008',
  '&qfr;': '\uD835\uDD2E',
  '&qint;': '\u2A0C',
  '&qopf;': '\uD835\uDD62',
  '&qprime;': '\u2057',
  '&qscr;': '\uD835\uDCC6',
  '&quaternions;': '\u210D',
  '&quatint;': '\u2A16',
  '&quest;': '?',
  '&questeq;': '\u225F',
  '&quot': '"',
  '&quot;': '"',
  '&rAarr;': '\u21DB',
  '&rArr;': '\u21D2',
  '&rAtail;': '\u291C',
  '&rBarr;': '\u290F',
  '&rHar;': '\u2964',
  '&race;': '\u223D\u0331',
  '&racute;': '\u0155',
  '&radic;': '\u221A',
  '&raemptyv;': '\u29B3',
  '&rang;': '\u27E9',
  '&rangd;': '\u2992',
  '&range;': '\u29A5',
  '&rangle;': '\u27E9',
  '&raquo': '\xBB',
  '&raquo;': '\xBB',
  '&rarr;': '\u2192',
  '&rarrap;': '\u2975',
  '&rarrb;': '\u21E5',
  '&rarrbfs;': '\u2920',
  '&rarrc;': '\u2933',
  '&rarrfs;': '\u291E',
  '&rarrhk;': '\u21AA',
  '&rarrlp;': '\u21AC',
  '&rarrpl;': '\u2945',
  '&rarrsim;': '\u2974',
  '&rarrtl;': '\u21A3',
  '&rarrw;': '\u219D',
  '&ratail;': '\u291A',
  '&ratio;': '\u2236',
  '&rationals;': '\u211A',
  '&rbarr;': '\u290D',
  '&rbbrk;': '\u2773',
  '&rbrace;': '}',
  '&rbrack;': ']',
  '&rbrke;': '\u298C',
  '&rbrksld;': '\u298E',
  '&rbrkslu;': '\u2990',
  '&rcaron;': '\u0159',
  '&rcedil;': '\u0157',
  '&rceil;': '\u2309',
  '&rcub;': '}',
  '&rcy;': '\u0440',
  '&rdca;': '\u2937',
  '&rdldhar;': '\u2969',
  '&rdquo;': '\u201D',
  '&rdquor;': '\u201D',
  '&rdsh;': '\u21B3',
  '&real;': '\u211C',
  '&realine;': '\u211B',
  '&realpart;': '\u211C',
  '&reals;': '\u211D',
  '&rect;': '\u25AD',
  '&reg': '\xAE',
  '&reg;': '\xAE',
  '&rfisht;': '\u297D',
  '&rfloor;': '\u230B',
  '&rfr;': '\uD835\uDD2F',
  '&rhard;': '\u21C1',
  '&rharu;': '\u21C0',
  '&rharul;': '\u296C',
  '&rho;': '\u03C1',
  '&rhov;': '\u03F1',
  '&rightarrow;': '\u2192',
  '&rightarrowtail;': '\u21A3',
  '&rightharpoondown;': '\u21C1',
  '&rightharpoonup;': '\u21C0',
  '&rightleftarrows;': '\u21C4',
  '&rightleftharpoons;': '\u21CC',
  '&rightrightarrows;': '\u21C9',
  '&rightsquigarrow;': '\u219D',
  '&rightthreetimes;': '\u22CC',
  '&ring;': '\u02DA',
  '&risingdotseq;': '\u2253',
  '&rlarr;': '\u21C4',
  '&rlhar;': '\u21CC',
  '&rlm;': '\u200F',
  '&rmoust;': '\u23B1',
  '&rmoustache;': '\u23B1',
  '&rnmid;': '\u2AEE',
  '&roang;': '\u27ED',
  '&roarr;': '\u21FE',
  '&robrk;': '\u27E7',
  '&ropar;': '\u2986',
  '&ropf;': '\uD835\uDD63',
  '&roplus;': '\u2A2E',
  '&rotimes;': '\u2A35',
  '&rpar;': ')',
  '&rpargt;': '\u2994',
  '&rppolint;': '\u2A12',
  '&rrarr;': '\u21C9',
  '&rsaquo;': '\u203A',
  '&rscr;': '\uD835\uDCC7',
  '&rsh;': '\u21B1',
  '&rsqb;': ']',
  '&rsquo;': '\u2019',
  '&rsquor;': '\u2019',
  '&rthree;': '\u22CC',
  '&rtimes;': '\u22CA',
  '&rtri;': '\u25B9',
  '&rtrie;': '\u22B5',
  '&rtrif;': '\u25B8',
  '&rtriltri;': '\u29CE',
  '&ruluhar;': '\u2968',
  '&rx;': '\u211E',
  '&sacute;': '\u015B',
  '&sbquo;': '\u201A',
  '&sc;': '\u227B',
  '&scE;': '\u2AB4',
  '&scap;': '\u2AB8',
  '&scaron;': '\u0161',
  '&sccue;': '\u227D',
  '&sce;': '\u2AB0',
  '&scedil;': '\u015F',
  '&scirc;': '\u015D',
  '&scnE;': '\u2AB6',
  '&scnap;': '\u2ABA',
  '&scnsim;': '\u22E9',
  '&scpolint;': '\u2A13',
  '&scsim;': '\u227F',
  '&scy;': '\u0441',
  '&sdot;': '\u22C5',
  '&sdotb;': '\u22A1',
  '&sdote;': '\u2A66',
  '&seArr;': '\u21D8',
  '&searhk;': '\u2925',
  '&searr;': '\u2198',
  '&searrow;': '\u2198',
  '&sect': '\xA7',
  '&sect;': '\xA7',
  '&semi;': ';',
  '&seswar;': '\u2929',
  '&setminus;': '\u2216',
  '&setmn;': '\u2216',
  '&sext;': '\u2736',
  '&sfr;': '\uD835\uDD30',
  '&sfrown;': '\u2322',
  '&sharp;': '\u266F',
  '&shchcy;': '\u0449',
  '&shcy;': '\u0448',
  '&shortmid;': '\u2223',
  '&shortparallel;': '\u2225',
  '&shy': '\xAD',
  '&shy;': '\xAD',
  '&sigma;': '\u03C3',
  '&sigmaf;': '\u03C2',
  '&sigmav;': '\u03C2',
  '&sim;': '\u223C',
  '&simdot;': '\u2A6A',
  '&sime;': '\u2243',
  '&simeq;': '\u2243',
  '&simg;': '\u2A9E',
  '&simgE;': '\u2AA0',
  '&siml;': '\u2A9D',
  '&simlE;': '\u2A9F',
  '&simne;': '\u2246',
  '&simplus;': '\u2A24',
  '&simrarr;': '\u2972',
  '&slarr;': '\u2190',
  '&smallsetminus;': '\u2216',
  '&smashp;': '\u2A33',
  '&smeparsl;': '\u29E4',
  '&smid;': '\u2223',
  '&smile;': '\u2323',
  '&smt;': '\u2AAA',
  '&smte;': '\u2AAC',
  '&smtes;': '\u2AAC\uFE00',
  '&softcy;': '\u044C',
  '&sol;': '/',
  '&solb;': '\u29C4',
  '&solbar;': '\u233F',
  '&sopf;': '\uD835\uDD64',
  '&spades;': '\u2660',
  '&spadesuit;': '\u2660',
  '&spar;': '\u2225',
  '&sqcap;': '\u2293',
  '&sqcaps;': '\u2293\uFE00',
  '&sqcup;': '\u2294',
  '&sqcups;': '\u2294\uFE00',
  '&sqsub;': '\u228F',
  '&sqsube;': '\u2291',
  '&sqsubset;': '\u228F',
  '&sqsubseteq;': '\u2291',
  '&sqsup;': '\u2290',
  '&sqsupe;': '\u2292',
  '&sqsupset;': '\u2290',
  '&sqsupseteq;': '\u2292',
  '&squ;': '\u25A1',
  '&square;': '\u25A1',
  '&squarf;': '\u25AA',
  '&squf;': '\u25AA',
  '&srarr;': '\u2192',
  '&sscr;': '\uD835\uDCC8',
  '&ssetmn;': '\u2216',
  '&ssmile;': '\u2323',
  '&sstarf;': '\u22C6',
  '&star;': '\u2606',
  '&starf;': '\u2605',
  '&straightepsilon;': '\u03F5',
  '&straightphi;': '\u03D5',
  '&strns;': '\xAF',
  '&sub;': '\u2282',
  '&subE;': '\u2AC5',
  '&subdot;': '\u2ABD',
  '&sube;': '\u2286',
  '&subedot;': '\u2AC3',
  '&submult;': '\u2AC1',
  '&subnE;': '\u2ACB',
  '&subne;': '\u228A',
  '&subplus;': '\u2ABF',
  '&subrarr;': '\u2979',
  '&subset;': '\u2282',
  '&subseteq;': '\u2286',
  '&subseteqq;': '\u2AC5',
  '&subsetneq;': '\u228A',
  '&subsetneqq;': '\u2ACB',
  '&subsim;': '\u2AC7',
  '&subsub;': '\u2AD5',
  '&subsup;': '\u2AD3',
  '&succ;': '\u227B',
  '&succapprox;': '\u2AB8',
  '&succcurlyeq;': '\u227D',
  '&succeq;': '\u2AB0',
  '&succnapprox;': '\u2ABA',
  '&succneqq;': '\u2AB6',
  '&succnsim;': '\u22E9',
  '&succsim;': '\u227F',
  '&sum;': '\u2211',
  '&sung;': '\u266A',
  '&sup1': '\xB9',
  '&sup1;': '\xB9',
  '&sup2': '\xB2',
  '&sup2;': '\xB2',
  '&sup3': '\xB3',
  '&sup3;': '\xB3',
  '&sup;': '\u2283',
  '&supE;': '\u2AC6',
  '&supdot;': '\u2ABE',
  '&supdsub;': '\u2AD8',
  '&supe;': '\u2287',
  '&supedot;': '\u2AC4',
  '&suphsol;': '\u27C9',
  '&suphsub;': '\u2AD7',
  '&suplarr;': '\u297B',
  '&supmult;': '\u2AC2',
  '&supnE;': '\u2ACC',
  '&supne;': '\u228B',
  '&supplus;': '\u2AC0',
  '&supset;': '\u2283',
  '&supseteq;': '\u2287',
  '&supseteqq;': '\u2AC6',
  '&supsetneq;': '\u228B',
  '&supsetneqq;': '\u2ACC',
  '&supsim;': '\u2AC8',
  '&supsub;': '\u2AD4',
  '&supsup;': '\u2AD6',
  '&swArr;': '\u21D9',
  '&swarhk;': '\u2926',
  '&swarr;': '\u2199',
  '&swarrow;': '\u2199',
  '&swnwar;': '\u292A',
  '&szlig': '\xDF',
  '&szlig;': '\xDF',
  '&target;': '\u2316',
  '&tau;': '\u03C4',
  '&tbrk;': '\u23B4',
  '&tcaron;': '\u0165',
  '&tcedil;': '\u0163',
  '&tcy;': '\u0442',
  '&tdot;': '\u20DB',
  '&telrec;': '\u2315',
  '&tfr;': '\uD835\uDD31',
  '&there4;': '\u2234',
  '&therefore;': '\u2234',
  '&theta;': '\u03B8',
  '&thetasym;': '\u03D1',
  '&thetav;': '\u03D1',
  '&thickapprox;': '\u2248',
  '&thicksim;': '\u223C',
  '&thinsp;': '\u2009',
  '&thkap;': '\u2248',
  '&thksim;': '\u223C',
  '&thorn': '\xFE',
  '&thorn;': '\xFE',
  '&tilde;': '\u02DC',
  '&times': '\xD7',
  '&times;': '\xD7',
  '&timesb;': '\u22A0',
  '&timesbar;': '\u2A31',
  '&timesd;': '\u2A30',
  '&tint;': '\u222D',
  '&toea;': '\u2928',
  '&top;': '\u22A4',
  '&topbot;': '\u2336',
  '&topcir;': '\u2AF1',
  '&topf;': '\uD835\uDD65',
  '&topfork;': '\u2ADA',
  '&tosa;': '\u2929',
  '&tprime;': '\u2034',
  '&trade;': '\u2122',
  '&triangle;': '\u25B5',
  '&triangledown;': '\u25BF',
  '&triangleleft;': '\u25C3',
  '&trianglelefteq;': '\u22B4',
  '&triangleq;': '\u225C',
  '&triangleright;': '\u25B9',
  '&trianglerighteq;': '\u22B5',
  '&tridot;': '\u25EC',
  '&trie;': '\u225C',
  '&triminus;': '\u2A3A',
  '&triplus;': '\u2A39',
  '&trisb;': '\u29CD',
  '&tritime;': '\u2A3B',
  '&trpezium;': '\u23E2',
  '&tscr;': '\uD835\uDCC9',
  '&tscy;': '\u0446',
  '&tshcy;': '\u045B',
  '&tstrok;': '\u0167',
  '&twixt;': '\u226C',
  '&twoheadleftarrow;': '\u219E',
  '&twoheadrightarrow;': '\u21A0',
  '&uArr;': '\u21D1',
  '&uHar;': '\u2963',
  '&uacute': '\xFA',
  '&uacute;': '\xFA',
  '&uarr;': '\u2191',
  '&ubrcy;': '\u045E',
  '&ubreve;': '\u016D',
  '&ucirc': '\xFB',
  '&ucirc;': '\xFB',
  '&ucy;': '\u0443',
  '&udarr;': '\u21C5',
  '&udblac;': '\u0171',
  '&udhar;': '\u296E',
  '&ufisht;': '\u297E',
  '&ufr;': '\uD835\uDD32',
  '&ugrave': '\xF9',
  '&ugrave;': '\xF9',
  '&uharl;': '\u21BF',
  '&uharr;': '\u21BE',
  '&uhblk;': '\u2580',
  '&ulcorn;': '\u231C',
  '&ulcorner;': '\u231C',
  '&ulcrop;': '\u230F',
  '&ultri;': '\u25F8',
  '&umacr;': '\u016B',
  '&uml': '\xA8',
  '&uml;': '\xA8',
  '&uogon;': '\u0173',
  '&uopf;': '\uD835\uDD66',
  '&uparrow;': '\u2191',
  '&updownarrow;': '\u2195',
  '&upharpoonleft;': '\u21BF',
  '&upharpoonright;': '\u21BE',
  '&uplus;': '\u228E',
  '&upsi;': '\u03C5',
  '&upsih;': '\u03D2',
  '&upsilon;': '\u03C5',
  '&upuparrows;': '\u21C8',
  '&urcorn;': '\u231D',
  '&urcorner;': '\u231D',
  '&urcrop;': '\u230E',
  '&uring;': '\u016F',
  '&urtri;': '\u25F9',
  '&uscr;': '\uD835\uDCCA',
  '&utdot;': '\u22F0',
  '&utilde;': '\u0169',
  '&utri;': '\u25B5',
  '&utrif;': '\u25B4',
  '&uuarr;': '\u21C8',
  '&uuml': '\xFC',
  '&uuml;': '\xFC',
  '&uwangle;': '\u29A7',
  '&vArr;': '\u21D5',
  '&vBar;': '\u2AE8',
  '&vBarv;': '\u2AE9',
  '&vDash;': '\u22A8',
  '&vangrt;': '\u299C',
  '&varepsilon;': '\u03F5',
  '&varkappa;': '\u03F0',
  '&varnothing;': '\u2205',
  '&varphi;': '\u03D5',
  '&varpi;': '\u03D6',
  '&varpropto;': '\u221D',
  '&varr;': '\u2195',
  '&varrho;': '\u03F1',
  '&varsigma;': '\u03C2',
  '&varsubsetneq;': '\u228A\uFE00',
  '&varsubsetneqq;': '\u2ACB\uFE00',
  '&varsupsetneq;': '\u228B\uFE00',
  '&varsupsetneqq;': '\u2ACC\uFE00',
  '&vartheta;': '\u03D1',
  '&vartriangleleft;': '\u22B2',
  '&vartriangleright;': '\u22B3',
  '&vcy;': '\u0432',
  '&vdash;': '\u22A2',
  '&vee;': '\u2228',
  '&veebar;': '\u22BB',
  '&veeeq;': '\u225A',
  '&vellip;': '\u22EE',
  '&verbar;': '|',
  '&vert;': '|',
  '&vfr;': '\uD835\uDD33',
  '&vltri;': '\u22B2',
  '&vnsub;': '\u2282\u20D2',
  '&vnsup;': '\u2283\u20D2',
  '&vopf;': '\uD835\uDD67',
  '&vprop;': '\u221D',
  '&vrtri;': '\u22B3',
  '&vscr;': '\uD835\uDCCB',
  '&vsubnE;': '\u2ACB\uFE00',
  '&vsubne;': '\u228A\uFE00',
  '&vsupnE;': '\u2ACC\uFE00',
  '&vsupne;': '\u228B\uFE00',
  '&vzigzag;': '\u299A',
  '&wcirc;': '\u0175',
  '&wedbar;': '\u2A5F',
  '&wedge;': '\u2227',
  '&wedgeq;': '\u2259',
  '&weierp;': '\u2118',
  '&wfr;': '\uD835\uDD34',
  '&wopf;': '\uD835\uDD68',
  '&wp;': '\u2118',
  '&wr;': '\u2240',
  '&wreath;': '\u2240',
  '&wscr;': '\uD835\uDCCC',
  '&xcap;': '\u22C2',
  '&xcirc;': '\u25EF',
  '&xcup;': '\u22C3',
  '&xdtri;': '\u25BD',
  '&xfr;': '\uD835\uDD35',
  '&xhArr;': '\u27FA',
  '&xharr;': '\u27F7',
  '&xi;': '\u03BE',
  '&xlArr;': '\u27F8',
  '&xlarr;': '\u27F5',
  '&xmap;': '\u27FC',
  '&xnis;': '\u22FB',
  '&xodot;': '\u2A00',
  '&xopf;': '\uD835\uDD69',
  '&xoplus;': '\u2A01',
  '&xotime;': '\u2A02',
  '&xrArr;': '\u27F9',
  '&xrarr;': '\u27F6',
  '&xscr;': '\uD835\uDCCD',
  '&xsqcup;': '\u2A06',
  '&xuplus;': '\u2A04',
  '&xutri;': '\u25B3',
  '&xvee;': '\u22C1',
  '&xwedge;': '\u22C0',
  '&yacute': '\xFD',
  '&yacute;': '\xFD',
  '&yacy;': '\u044F',
  '&ycirc;': '\u0177',
  '&ycy;': '\u044B',
  '&yen': '\xA5',
  '&yen;': '\xA5',
  '&yfr;': '\uD835\uDD36',
  '&yicy;': '\u0457',
  '&yopf;': '\uD835\uDD6A',
  '&yscr;': '\uD835\uDCCE',
  '&yucy;': '\u044E',
  '&yuml': '\xFF',
  '&yuml;': '\xFF',
  '&zacute;': '\u017A',
  '&zcaron;': '\u017E',
  '&zcy;': '\u0437',
  '&zdot;': '\u017C',
  '&zeetrf;': '\u2128',
  '&zeta;': '\u03B6',
  '&zfr;': '\uD835\uDD37',
  '&zhcy;': '\u0436',
  '&zigrarr;': '\u21DD',
  '&zopf;': '\uD835\uDD6B',
  '&zscr;': '\uD835\uDCCF',
  '&zwj;': '\u200D',
  '&zwnj;': '\u200C'
};

/**
 * @module htmlDecode
 * @description
 * Convert all HTML entities to applicable characters.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the htmlDecode function
 * ```sh
 * yarn add strman.htmldecode
 * ```
 * ## Usage
 * ```javascript
 * import { htmlDecode } from 'strman'
 * // OR
 * import htmlDecode from 'strman.htmldecode'
 * ```
 * @param {String} value - value to decode.
 * @example
 * htmlDecode('&lt;div&gt;')
 * // => '<div>'
 * @returns { String } The decoded data.
 */
var htmldecode = (function (value) {
  return replace(value, '(&\\w+;)', function (match, index) {
    if (typeof entitiesDecode[index] !== 'undefined') {
      return entitiesDecode[index];
    }
    return match;
  });
});

var entitiesEncode = {
  '\u2130': '&Escr;',
  '\u0397': '\u0397',
  '\xCB': '\xCB',
  '\u2147': '&ExponentialE;',
  '\u0424': '&Fcy;',
  '\u0395': '\u0395',
  '\u0118': '&Eogon;',
  '\u0112': '&Emacr;',
  '\xC8': '\xC8',
  '\u0110': '&Dstrok;',
  '\u014A': '&ENG;',
  '\xD0': '\xD0',
  '\xC9': '\xC9',
  '\u011A': '&Ecaron;',
  '\xCA': '\xCA',
  '\u042D': '&Ecy;',
  '\u0116': '&Edot;',
  '\u2146': '&DifferentialD;',
  '\u0394': '\u0394',
  '\u010E': '&Dcaron;',
  '\u0414': '&Dcy;',
  '\u0402': '&DJcy;',
  '\u0405': '&DScy;',
  '\u040F': '&DZcy;',
  '\u2102': '&Copf;',
  '\u03A7': '\u03A7',
  '\u010A': '&Cdot;',
  '\xC7': '\xC7',
  '\u0108': '&Ccirc;',
  '\u0106': '&Cacute;',
  '\xC3': '\xC3',
  '\xC4': '\xC4',
  '\xC5': '\xC5',
  '\u0104': '&Aogon;',
  '\u0391': '\u0391',
  '\u0100': '&Amacr;',
  '\xC0': '\xC0',
  '\xC1': '\xC1',
  '\u0102': '&Abreve;',
  '\xC2': '\xC2',
  '\u0410': '&Acy;',
  '\xC6': '\xC6',
  '&': '&AMP;',
  '\uD835\uDD04': '&Afr;',
  '\u2A53': '&And;',
  '\uD835\uDD38': '&Aopf;',
  '\u2061': '&ApplyFunction;',
  '\uD835\uDC9C': '&Ascr;',
  '\u2254': '&Assign;',
  '\u2216': '&Backslash;',
  '\u2AE7': '&Barv;',
  '\u2306': '&Barwed;',
  '\u0411': '&Bcy;',
  '\u2235': '&Because;',
  '\u212C': '&Bernoullis;',
  '\u0392': '\u0392',
  '\uD835\uDD05': '&Bfr;',
  '\uD835\uDD39': '&Bopf;',
  '\u02D8': '&Breve;',
  '\u224E': '&Bumpeq;',
  '\u0427': '&CHcy;',
  '\xA9': '&COPY;',
  '\u22D2': '&Cap;',
  '\u2145': '&CapitalDifferentialD;',
  '\u212D': '&Cayleys;',
  '\u010C': '&Ccaron;',
  '\u2230': '&Cconint;',
  '\xB8': '&Cedilla;',
  '\xB7': '&CenterDot;',
  '\u2299': '&CircleDot;',
  '\u2296': '&CircleMinus;',
  '\u2295': '&CirclePlus;',
  '\u2297': '&CircleTimes;',
  '\u2232': '&ClockwiseContourIntegral;',
  '\u201D': '&CloseCurlyDoubleQuote;',
  '\u2019': '&CloseCurlyQuote;',
  '\u2237': '&Colon;',
  '\u2A74': '&Colone;',
  '\u2261': '&Congruent;',
  '\u222F': '&Conint;',
  '\u222E': '&ContourIntegral;',
  '\u2210': '&Coproduct;',
  '\u2233': '&CounterClockwiseContourIntegral;',
  '\u2A2F': '&Cross;',
  '\uD835\uDC9E': '&Cscr;',
  '\u22D3': '&Cup;',
  '\u224D': '&CupCap;',
  '\u2911': '&DDotrahd;',
  '\u2021': '\u2021',
  '\u21A1': '&Darr;',
  '\u2AE4': '&Dashv;',
  '\u2207': '&Del;',
  '\uD835\uDD07': '&Dfr;',
  '\xB4': '&DiacriticalAcute;',
  '\u02D9': '&DiacriticalDot;',
  '\u02DD': '&DiacriticalDoubleAcute;',
  '`': '&DiacriticalGrave;',
  '\u02DC': '&DiacriticalTilde;',
  '\u22C4': '&Diamond;',
  '\uD835\uDD3B': '&Dopf;',
  '\xA8': '&Dot;',
  '\u20DC': '&DotDot;',
  '\u2250': '&DotEqual;',
  '\u21D3': '&DoubleDownArrow;',
  '\u21D0': '&DoubleLeftArrow;',
  '\u21D4': '&DoubleLeftRightArrow;',
  '\u27F8': '&DoubleLongLeftArrow;',
  '\u27FA': '&DoubleLongLeftRightArrow;',
  '\u27F9': '&DoubleLongRightArrow;',
  '\u21D2': '&DoubleRightArrow;',
  '\u22A8': '&DoubleRightTee;',
  '\u21D1': '&DoubleUpArrow;',
  '\u21D5': '&DoubleUpDownArrow;',
  '\u2225': '&DoubleVerticalBar;',
  '\u2193': '&DownArrow;',
  '\u2913': '&DownArrowBar;',
  '\u21F5': '&DownArrowUpArrow;',
  '\u0311': '&DownBreve;',
  '\u2950': '&DownLeftRightVector;',
  '\u295E': '&DownLeftTeeVector;',
  '\u21BD': '&DownLeftVector;',
  '\u2956': '&DownLeftVectorBar;',
  '\u295F': '&DownRightTeeVector;',
  '\u21C1': '&DownRightVector;',
  '\u2957': '&DownRightVectorBar;',
  '\u22A4': '&DownTee;',
  '\u21A7': '&DownTeeArrow;',
  '\uD835\uDC9F': '&Dscr;',
  '\uD835\uDD08': '&Efr;',
  '\u2208': '&Element;',
  '\u25FB': '&EmptySmallSquare;',
  '\u25AB': '&EmptyVerySmallSquare;',
  '\uD835\uDD3C': '&Eopf;',
  '\u2A75': '&Equal;',
  '\u2242': '&EqualTilde;',
  '\u21CC': '&Equilibrium;',
  '\u2A73': '&Esim;',
  '\u2203': '&Exists;',
  '\uD835\uDD09': '&Ffr;',
  '\u25FC': '&FilledSmallSquare;',
  '\u25AA': '&FilledVerySmallSquare;',
  '\uD835\uDD3D': '&Fopf;',
  '\u2200': '&ForAll;',
  '>': '&GT;',
  '\u013F': '&Lmidot;',
  '\u0141': '&Lstrok;',
  '\u041C': '&Mcy;',
  '\u2133': '&Mellintrf;',
  '\u039B': '\u039B',
  '\u2112': '&Laplacetrf;',
  '\u013D': '&Lcaron;',
  '\u013B': '&Lcedil;',
  '\u041B': '&Lcy;',
  '\u0409': '&LJcy;',
  '\u0139': '&Lacute;',
  '\u0408': '&Jsercy;',
  '\u0404': '&Jukcy;',
  '\u0425': '&KHcy;',
  '\u040C': '&KJcy;',
  '\u039A': '\u039A',
  '\u0136': '&Kcedil;',
  '\u041A': '&Kcy;',
  '\u012E': '&Iogon;',
  '\u0399': '\u0399',
  '\u2110': '&Iscr;',
  '\u0128': '&Itilde;',
  '\u0406': '&Iukcy;',
  '\xCF': '\xCF',
  '\u0134': '&Jcirc;',
  '\u0419': '&Jcy;',
  '\u0126': '&Hstrok;',
  '\u0415': '&IEcy;',
  '\u0132': '&IJlig;',
  '\u0401': '&IOcy;',
  '\xCD': '\xCD',
  '\xCE': '\xCE',
  '\u0418': '&Icy;',
  '\u0130': '&Idot;',
  '\u2111': '&Ifr;',
  '\xCC': '\xCC',
  '\u012A': '&Imacr;',
  '\u2148': '&ImaginaryI;',
  '\u042A': '&HARDcy;',
  '\u02C7': '&Hacek;',
  '\u0124': '&Hcirc;',
  '\u210C': '&Hfr;',
  '\u210B': '&HilbertSpace;',
  '\u210D': '&Hopf;',
  '\u2131': '&Fouriertrf;',
  '\u0403': '&GJcy;',
  '\u0393': '\u0393',
  '\u03DC': '&Gammad;',
  '\u011E': '&Gbreve;',
  '\u0122': '&Gcedil;',
  '\u011C': '&Gcirc;',
  '\u0413': '&Gcy;',
  '\u0120': '&Gdot;',
  '\uD835\uDD0A': '&Gfr;',
  '\u22D9': '&Gg;',
  '\uD835\uDD3E': '&Gopf;',
  '\u2265': '&GreaterEqual;',
  '\u22DB': '&GreaterEqualLess;',
  '\u2267': '&GreaterFullEqual;',
  '\u2AA2': '&GreaterGreater;',
  '\u2277': '&GreaterLess;',
  '\u2A7E': '&GreaterSlantEqual;',
  '\u2273': '&GreaterTilde;',
  '\uD835\uDCA2': '&Gscr;',
  '\u226B': '&Gt;',
  '^': '&Hat;',
  '\u2500': '&HorizontalLine;',
  '\u224F': '&HumpEqual;',
  '\u222C': '&Int;',
  '\u222B': '&Integral;',
  '\u22C2': '&Intersection;',
  '\u2063': '&InvisibleComma;',
  '\u2062': '&InvisibleTimes;',
  '\uD835\uDD40': '&Iopf;',
  '\uD835\uDD0D': '&Jfr;',
  '\uD835\uDD41': '&Jopf;',
  '\uD835\uDCA5': '&Jscr;',
  '\uD835\uDD0E': '&Kfr;',
  '\uD835\uDD42': '&Kopf;',
  '\uD835\uDCA6': '&Kscr;',
  '<': '&LT;',
  '\u27EA': '&Lang;',
  '\u219E': '&Larr;',
  '\u27E8': '&LeftAngleBracket;',
  '\u2190': '&LeftArrow;',
  '\u21E4': '&LeftArrowBar;',
  '\u21C6': '&LeftArrowRightArrow;',
  '\u2308': '&LeftCeiling;',
  '\u27E6': '&LeftDoubleBracket;',
  '\u2961': '&LeftDownTeeVector;',
  '\u21C3': '&LeftDownVector;',
  '\u2959': '&LeftDownVectorBar;',
  '\u230A': '&LeftFloor;',
  '\u2194': '&LeftRightArrow;',
  '\u294E': '&LeftRightVector;',
  '\u22A3': '&LeftTee;',
  '\u21A4': '&LeftTeeArrow;',
  '\u295A': '&LeftTeeVector;',
  '\u22B2': '&LeftTriangle;',
  '\u29CF': '&LeftTriangleBar;',
  '\u22B4': '&LeftTriangleEqual;',
  '\u2951': '&LeftUpDownVector;',
  '\u2960': '&LeftUpTeeVector;',
  '\u21BF': '&LeftUpVector;',
  '\u2958': '&LeftUpVectorBar;',
  '\u21BC': '&LeftVector;',
  '\u2952': '&LeftVectorBar;',
  '\u22DA': '&LessEqualGreater;',
  '\u2266': '&LessFullEqual;',
  '\u2276': '&LessGreater;',
  '\u2AA1': '&LessLess;',
  '\u2A7D': '&LessSlantEqual;',
  '\u2272': '&LessTilde;',
  '\uD835\uDD0F': '&Lfr;',
  '\u22D8': '&Ll;',
  '\u21DA': '&Lleftarrow;',
  '\u27F5': '&LongLeftArrow;',
  '\u27F7': '&LongLeftRightArrow;',
  '\u27F6': '&LongRightArrow;',
  '\uD835\uDD43': '&Lopf;',
  '\u2199': '&LowerLeftArrow;',
  '\u2198': '&LowerRightArrow;',
  '\u21B0': '&Lsh;',
  '\u226A': '&Lt;',
  '\u2905': '&Map;',
  '\u205F': '&MediumSpace;',
  '\uD835\uDD10': '&Mfr;',
  '\u2213': '&MinusPlus;',
  '\uD835\uDD44': '&Mopf;',
  '\u211A': '&Qopf;',
  '\u0154': '&Racute;',
  '\u0158': '&Rcaron;',
  '\u0156': '&Rcedil;',
  '\u0420': '&Rcy;',
  '\u211C': '&Re;',
  '\u03A8': '\u03A8',
  '\u2119': '&Popf;',
  '\u03A6': '\u03A6',
  '\u03A0': '\u03A0',
  '\u041F': '&Pcy;',
  '\xD8': '\xD8',
  '\xD5': '\xD5',
  '\xD6': '\xD6',
  '\xD2': '\xD2',
  '\u014C': '&Omacr;',
  '\u03A9': '\u03A9',
  '\u039F': '\u039F',
  '\xD1': '\xD1',
  '\u039D': '\u039D',
  '\u0152': '\u0152',
  '\xD3': '\xD3',
  '\xD4': '\xD4',
  '\u041E': '&Ocy;',
  '\u0150': '&Odblac;',
  '\u2115': '&Nopf;',
  '\u039C': '\u039C',
  '\u040A': '&NJcy;',
  '\u0143': '&Nacute;',
  '\u0147': '&Ncaron;',
  '\u0145': '&Ncedil;',
  '\u041D': '&Ncy;',
  '\u200B': '&NegativeMediumSpace;',
  '\\n': '&NewLine;',
  '\uD835\uDD11': '&Nfr;',
  '\u2060': '&NoBreak;',
  '\xA0': '&NonBreakingSpace;',
  '\u2AEC': '&Not;',
  '\u2262': '&NotCongruent;',
  '\u226D': '&NotCupCap;',
  '\u2226': '&NotDoubleVerticalBar;',
  '\u2209': '&NotElement;',
  '\u2260': '&NotEqual;',
  '\u2242\u0338': '&NotEqualTilde;',
  '\u2204': '&NotExists;',
  '\u226F': '&NotGreater;',
  '\u2271': '&NotGreaterEqual;',
  '\u2267\u0338': '&NotGreaterFullEqual;',
  '\u226B\u0338': '&NotGreaterGreater;',
  '\u2279': '&NotGreaterLess;',
  '\u2A7E\u0338': '&NotGreaterSlantEqual;',
  '\u2275': '&NotGreaterTilde;',
  '\u224E\u0338': '&NotHumpDownHump;',
  '\u224F\u0338': '&NotHumpEqual;',
  '\u22EA': '&NotLeftTriangle;',
  '\u29CF\u0338': '&NotLeftTriangleBar;',
  '\u22EC': '&NotLeftTriangleEqual;',
  '\u226E': '&NotLess;',
  '\u2270': '&NotLessEqual;',
  '\u2278': '&NotLessGreater;',
  '\u226A\u0338': '&NotLessLess;',
  '\u2A7D\u0338': '&NotLessSlantEqual;',
  '\u2274': '&NotLessTilde;',
  '\u2AA2\u0338': '&NotNestedGreaterGreater;',
  '\u2AA1\u0338': '&NotNestedLessLess;',
  '\u2280': '&NotPrecedes;',
  '\u2AAF\u0338': '&NotPrecedesEqual;',
  '\u22E0': '&NotPrecedesSlantEqual;',
  '\u220C': '&NotReverseElement;',
  '\u22EB': '&NotRightTriangle;',
  '\u29D0\u0338': '&NotRightTriangleBar;',
  '\u22ED': '&NotRightTriangleEqual;',
  '\u228F\u0338': '&NotSquareSubset;',
  '\u22E2': '&NotSquareSubsetEqual;',
  '\u2290\u0338': '&NotSquareSuperset;',
  '\u22E3': '&NotSquareSupersetEqual;',
  '\u2282\u20D2': '&NotSubset;',
  '\u2288': '&NotSubsetEqual;',
  '\u2281': '&NotSucceeds;',
  '\u2AB0\u0338': '&NotSucceedsEqual;',
  '\u22E1': '&NotSucceedsSlantEqual;',
  '\u227F\u0338': '&NotSucceedsTilde;',
  '\u2283\u20D2': '&NotSuperset;',
  '\u2289': '&NotSupersetEqual;',
  '\u2241': '&NotTilde;',
  '\u2244': '&NotTildeEqual;',
  '\u2247': '&NotTildeFullEqual;',
  '\u2249': '&NotTildeTilde;',
  '\u2224': '&NotVerticalBar;',
  '\uD835\uDCA9': '&Nscr;',
  '\uD835\uDD12': '&Ofr;',
  '\uD835\uDD46': '&Oopf;',
  '\u201C': '&OpenCurlyDoubleQuote;',
  '\u2018': '&OpenCurlyQuote;',
  '\u2A54': '&Or;',
  '\uD835\uDCAA': '&Oscr;',
  '\u2A37': '&Otimes;',
  '\u203E': '&OverBar;',
  '\u23DE': '&OverBrace;',
  '\u23B4': '&OverBracket;',
  '\u23DC': '&OverParenthesis;',
  '\u2202': '&PartialD;',
  '\uD835\uDD13': '&Pfr;',
  '\xB1': '&PlusMinus;',
  '\u2ABB': '&Pr;',
  '\u227A': '&Precedes;',
  '\u2AAF': '&PrecedesEqual;',
  '\u227C': '&PrecedesSlantEqual;',
  '\u227E': '&PrecedesTilde;',
  '\u2033': '\u2033',
  '\u220F': '&Product;',
  '\u221D': '&Proportional;',
  '\uD835\uDCAB': '&Pscr;',
  '"': '&QUOT;',
  '\uD835\uDD14': '&Qfr;',
  '\uD835\uDCAC': '&Qscr;',
  '\u2910': '&RBarr;',
  '\xAE': '&REG;',
  '\u27EB': '&Rang;',
  '\u21A0': '&Rarr;',
  '\u2916': '&Rarrtl;',
  '\u220B': '&ReverseElement;',
  '\u21CB': '&ReverseEquilibrium;',
  '\u296F': '&ReverseUpEquilibrium;',
  '\u042F': '&YAcy;',
  '\u0407': '&YIcy;',
  '\u042E': '&YUcy;',
  '\xDD': '\xDD',
  '\u0176': '&Ycirc;',
  '\u042B': '&Ycy;',
  '\u039E': '\u039E',
  '\u0174': '&Wcirc;',
  '\u0412': '&Vcy;',
  '\u0168': '&Utilde;',
  '\xDC': '\xDC',
  '\u03A5': '\u03A5',
  '\u016E': '&Uring;',
  '\u03D2': '&Upsi;',
  '\u0172': '&Uogon;',
  '\xD9': '\xD9',
  '\u016A': '&Umacr;',
  '\u040E': '&Ubrcy;',
  '\u016C': '&Ubreve;',
  '\xDB': '\xDB',
  '\u0423': '&Ucy;',
  '\u0170': '&Udblac;',
  '\u0166': '&Tstrok;',
  '\xDA': '\xDA',
  '\u0398': '\u0398',
  '\u03A4': '\u03A4',
  '\u0164': '&Tcaron;',
  '\u0162': '&Tcedil;',
  '\u0422': '&Tcy;',
  '\u040B': '&TSHcy;',
  '\u0426': '&TScy;',
  '\xDE': '\xDE',
  '\u0429': '&SHCHcy;',
  '\u0428': '&SHcy;',
  '\u042C': '&SOFTcy;',
  '\u015A': '&Sacute;',
  '\u0160': '\u0160',
  '\u015E': '&Scedil;',
  '\u015C': '&Scirc;',
  '\u0421': '&Scy;',
  '\u03A3': '\u03A3',
  '\u211B': '&Rscr;',
  '\u211D': '&Ropf;',
  '\u03A1': '\u03A1',
  '\u27E9': '&RightAngleBracket;',
  '\u2192': '&RightArrow;',
  '\u21E5': '&RightArrowBar;',
  '\u21C4': '&RightArrowLeftArrow;',
  '\u2309': '&RightCeiling;',
  '\u27E7': '&RightDoubleBracket;',
  '\u295D': '&RightDownTeeVector;',
  '\u21C2': '&RightDownVector;',
  '\u2955': '&RightDownVectorBar;',
  '\u230B': '&RightFloor;',
  '\u22A2': '&RightTee;',
  '\u21A6': '&RightTeeArrow;',
  '\u295B': '&RightTeeVector;',
  '\u22B3': '&RightTriangle;',
  '\u29D0': '&RightTriangleBar;',
  '\u22B5': '&RightTriangleEqual;',
  '\u294F': '&RightUpDownVector;',
  '\u295C': '&RightUpTeeVector;',
  '\u21BE': '&RightUpVector;',
  '\u2954': '&RightUpVectorBar;',
  '\u21C0': '&RightVector;',
  '\u2953': '&RightVectorBar;',
  '\u2970': '&RoundImplies;',
  '\u21DB': '&Rrightarrow;',
  '\u21B1': '&Rsh;',
  '\u29F4': '&RuleDelayed;',
  '\u2ABC': '&Sc;',
  '\uD835\uDD16': '&Sfr;',
  '\u2191': '&ShortUpArrow;',
  '\u2218': '&SmallCircle;',
  '\uD835\uDD4A': '&Sopf;',
  '\u221A': '&Sqrt;',
  '\u25A1': '&Square;',
  '\u2293': '&SquareIntersection;',
  '\u228F': '&SquareSubset;',
  '\u2291': '&SquareSubsetEqual;',
  '\u2290': '&SquareSuperset;',
  '\u2292': '&SquareSupersetEqual;',
  '\u2294': '&SquareUnion;',
  '\uD835\uDCAE': '&Sscr;',
  '\u22C6': '&Star;',
  '\u22D0': '&Sub;',
  '\u2286': '&SubsetEqual;',
  '\u227B': '&Succeeds;',
  '\u2AB0': '&SucceedsEqual;',
  '\u227D': '&SucceedsSlantEqual;',
  '\u227F': '&SucceedsTilde;',
  '\u2211': '&Sum;',
  '\u22D1': '&Sup;',
  '\u2283': '&Superset;',
  '\u2287': '&SupersetEqual;',
  '\u2122': '&TRADE;',
  '  ': '&Tab;',
  '\uD835\uDD17': '&Tfr;',
  '\u2234': '&Therefore;',
  '\u205F\u200A': '&ThickSpace;',
  '\u2009': '&ThinSpace;',
  '\u223C': '&Tilde;',
  '\u2243': '&TildeEqual;',
  '\u2245': '&TildeFullEqual;',
  '\u2248': '&TildeTilde;',
  '\uD835\uDD4B': '&Topf;',
  '\u20DB': '&TripleDot;',
  '\uD835\uDCAF': '&Tscr;',
  '\u219F': '&Uarr;',
  '\u2949': '&Uarrocir;',
  '\uD835\uDD18': '&Ufr;',
  _: '&UnderBar;',
  '\u23DF': '&UnderBrace;',
  '\u23B5': '&UnderBracket;',
  '\u23DD': '&UnderParenthesis;',
  '\u22C3': '&Union;',
  '\u228E': '&UnionPlus;',
  '\uD835\uDD4C': '&Uopf;',
  '\u2912': '&UpArrowBar;',
  '\u21C5': '&UpArrowDownArrow;',
  '\u2195': '&UpDownArrow;',
  '\u296E': '&UpEquilibrium;',
  '\u22A5': '&UpTee;',
  '\u21A5': '&UpTeeArrow;',
  '\u2196': '&UpperLeftArrow;',
  '\u2197': '&UpperRightArrow;',
  '\uD835\uDCB0': '&Uscr;',
  '\u22AB': '&VDash;',
  '\u2AEB': '&Vbar;',
  '\u22A9': '&Vdash;',
  '\u2AE6': '&Vdashl;',
  '\u22C1': '&Vee;',
  '\u2016': '&Verbar;',
  '\u2223': '&VerticalBar;',
  '|': '&VerticalLine;',
  '\u2758': '&VerticalSeparator;',
  '\u2240': '&VerticalTilde;',
  '\u200A': '&VeryThinSpace;',
  '\uD835\uDD19': '&Vfr;',
  '\uD835\uDD4D': '&Vopf;',
  '\uD835\uDCB1': '&Vscr;',
  '\u22AA': '&Vvdash;',
  '\u22C0': '&Wedge;',
  '\uD835\uDD1A': '&Wfr;',
  '\uD835\uDD4E': '&Wopf;',
  '\uD835\uDCB2': '&Wscr;',
  '\uD835\uDD1B': '&Xfr;',
  '\uD835\uDD4F': '&Xopf;',
  '\uD835\uDCB3': '&Xscr;',
  '\uD835\uDD1C': '&Yfr;',
  '\uD835\uDD50': '&Yopf;',
  '\uD835\uDCB4': '&Yscr;',
  '\u2113': '&ell;',
  '\u0113': '&emacr;',
  '\u044D': '&ecy;',
  '\u011B': '&ecaron;',
  '\u045F': '&dzcy;',
  '\u0111': '&dstrok;',
  '\u0455': '&dscy;',
  '\u0452': '&djcy;',
  '\u03DD': '&digamma;',
  '\u03B4': '\u03B4',
  '\u010F': '&dcaron;',
  '\u0434': '&dcy;',
  '\u2138': '&daleth;',
  '\u02C6': '\u02C6',
  '\u03C7': '\u03C7',
  '\u0447': '&chcy;',
  '\u010B': '&cdot;',
  '\u010D': '&ccaron;',
  '\xE7': '\xE7',
  '\u0109': '&ccirc;',
  '\u0107': '&cacute;',
  '\u03B2': '\u03B2',
  '\u2136': '&beth;',
  '\u0431': '&bcy;',
  '\xE3': '\xE3',
  '\xE4': '\xE4',
  '\xE5': '\xE5',
  '\u0105': '&aogon;',
  '\xE0': '\xE0',
  '\u2135': '\u2135',
  '\u03B1': '\u03B1',
  '\u0101': '&amacr;',
  '\xE2': '\xE2',
  '\u0430': '&acy;',
  '\xE6': '\xE6',
  '\xE1': '\xE1',
  '\u0103': '&abreve;',
  '\u0178': '\u0178',
  '\u0416': '&ZHcy;',
  '\u0179': '&Zacute;',
  '\u017D': '&Zcaron;',
  '\u0417': '&Zcy;',
  '\u017B': '&Zdot;',
  '\u0396': '\u0396',
  '\u2128': '&Zfr;',
  '\u2124': '&Zopf;',
  '\uD835\uDCB5': '&Zscr;',
  '\u223E': '&ac;',
  '\u223E\u0333': '&acE;',
  '\u223F': '&acd;',
  '\uD835\uDD1E': '&afr;',
  '\u2A3F': '&amalg;',
  '\u2227': '\u2227',
  '\u2A55': '&andand;',
  '\u2A5C': '&andd;',
  '\u2A58': '&andslope;',
  '\u2A5A': '&andv;',
  '\u2220': '\u2220',
  '\u29A4': '&ange;',
  '\u2221': '&angmsd;',
  '\u29A8': '&angmsdaa;',
  '\u29A9': '&angmsdab;',
  '\u29AA': '&angmsdac;',
  '\u29AB': '&angmsdad;',
  '\u29AC': '&angmsdae;',
  '\u29AD': '&angmsdaf;',
  '\u29AE': '&angmsdag;',
  '\u29AF': '&angmsdah;',
  '\u221F': '&angrt;',
  '\u22BE': '&angrtvb;',
  '\u299D': '&angrtvbd;',
  '\u2222': '&angsph;',
  '\u237C': '&angzarr;',
  '\uD835\uDD52': '&aopf;',
  '\u2A70': '&apE;',
  '\u2A6F': '&apacir;',
  '\u224A': '&ape;',
  '\u224B': '&apid;',
  '\'': '\'',
  '\uD835\uDCB6': '&ascr;',
  '*': '&ast;',
  '\u2A11': '&awint;',
  '\u2AED': '&bNot;',
  '\u224C': '&backcong;',
  '\u03F6': '&backepsilon;',
  '\u2035': '&backprime;',
  '\u223D': '&backsim;',
  '\u22CD': '&backsimeq;',
  '\u22BD': '&barvee;',
  '\u2305': '&barwed;',
  '\u23B6': '&bbrktbrk;',
  '\u201E': '\u201E',
  '\u29B0': '&bemptyv;',
  '\u226C': '&between;',
  '\uD835\uDD1F': '&bfr;',
  '\u25EF': '&bigcirc;',
  '\u2A00': '&bigodot;',
  '\u2A01': '&bigoplus;',
  '\u2A02': '&bigotimes;',
  '\u2A06': '&bigsqcup;',
  '\u2605': '&bigstar;',
  '\u25BD': '&bigtriangledown;',
  '\u25B3': '&bigtriangleup;',
  '\u2A04': '&biguplus;',
  '\u290D': '&bkarow;',
  '\u29EB': '&blacklozenge;',
  '\u25B4': '&blacktriangle;',
  '\u25BE': '&blacktriangledown;',
  '\u25C2': '&blacktriangleleft;',
  '\u25B8': '&blacktriangleright;',
  '\u2423': '&blank;',
  '\u2592': '&blk12;',
  '\u2591': '&blk14;',
  '\u2593': '&blk34;',
  '\u2588': '&block;',
  '=\u20E5': '&bne;',
  '\u2261\u20E5': '&bnequiv;',
  '\u2310': '&bnot;',
  '\uD835\uDD53': '&bopf;',
  '\u22C8': '&bowtie;',
  '\u2557': '&boxDL;',
  '\u2554': '&boxDR;',
  '\u2556': '&boxDl;',
  '\u2553': '&boxDr;',
  '\u2550': '&boxH;',
  '\u2566': '&boxHD;',
  '\u2569': '&boxHU;',
  '\u2564': '&boxHd;',
  '\u2567': '&boxHu;',
  '\u255D': '&boxUL;',
  '\u255A': '&boxUR;',
  '\u255C': '&boxUl;',
  '\u2559': '&boxUr;',
  '\u2551': '&boxV;',
  '\u256C': '&boxVH;',
  '\u2563': '&boxVL;',
  '\u2560': '&boxVR;',
  '\u256B': '&boxVh;',
  '\u2562': '&boxVl;',
  '\u255F': '&boxVr;',
  '\u29C9': '&boxbox;',
  '\u2555': '&boxdL;',
  '\u2552': '&boxdR;',
  '\u2510': '&boxdl;',
  '\u250C': '&boxdr;',
  '\u2565': '&boxhD;',
  '\u2568': '&boxhU;',
  '\u252C': '&boxhd;',
  '\u2534': '&boxhu;',
  '\u229F': '&boxminus;',
  '\u229E': '&boxplus;',
  '\u22A0': '&boxtimes;',
  '\u255B': '&boxuL;',
  '\u2558': '&boxuR;',
  '\u2518': '&boxul;',
  '\u2514': '&boxur;',
  '\u2502': '&boxv;',
  '\u256A': '&boxvH;',
  '\u2561': '&boxvL;',
  '\u255E': '&boxvR;',
  '\u253C': '&boxvh;',
  '\u2524': '&boxvl;',
  '\u251C': '&boxvr;',
  '\xA6': '\xA6',
  '\uD835\uDCB7': '&bscr;',
  '\u204F': '&bsemi;',
  '\\': '&bsol;',
  '\u29C5': '&bsolb;',
  '\u27C8': '&bsolhsub;',
  '\u2022': '\u2022',
  '\u2AAE': '&bumpE;',
  '\u2229': '\u2229',
  '\u2A44': '&capand;',
  '\u2A49': '&capbrcup;',
  '\u2A4B': '&capcap;',
  '\u2A47': '&capcup;',
  '\u2A40': '&capdot;',
  '\u2229\uFE00': '&caps;',
  '\u2041': '&caret;',
  '\u2A4D': '&ccaps;',
  '\u2A4C': '&ccups;',
  '\u2A50': '&ccupssm;',
  '\u29B2': '&cemptyv;',
  '\xA2': '\xA2',
  '\uD835\uDD20': '&cfr;',
  '\u2713': '&check;',
  '\u25CB': '&cir;',
  '\u29C3': '&cirE;',
  '\u2257': '&circeq;',
  '\u21BA': '&circlearrowleft;',
  '\u21BB': '&circlearrowright;',
  '\u24C8': '&circledS;',
  '\u229B': '&circledast;',
  '\u229A': '&circledcirc;',
  '\u229D': '&circleddash;',
  '\u2A10': '&cirfnint;',
  '\u2AEF': '&cirmid;',
  '\u29C2': '&cirscir;',
  '\u2663': '\u2663',
  ':': '&colon;',
  ',': '&comma;',
  '@': '&commat;',
  '\u2201': '&comp;',
  '\u2A6D': '&congdot;',
  '\uD835\uDD54': '&copf;',
  '\u2117': '&copysr;',
  '\u21B5': '\u21B5',
  '\u2717': '&cross;',
  '\uD835\uDCB8': '&cscr;',
  '\u2ACF': '&csub;',
  '\u2AD1': '&csube;',
  '\u2AD0': '&csup;',
  '\u2AD2': '&csupe;',
  '\u22EF': '&ctdot;',
  '\u2938': '&cudarrl;',
  '\u2935': '&cudarrr;',
  '\u22DE': '&cuepr;',
  '\u22DF': '&cuesc;',
  '\u21B6': '&cularr;',
  '\u293D': '&cularrp;',
  '\u222A': '\u222A',
  '\u2A48': '&cupbrcap;',
  '\u2A46': '&cupcap;',
  '\u2A4A': '&cupcup;',
  '\u228D': '&cupdot;',
  '\u2A45': '&cupor;',
  '\u222A\uFE00': '&cups;',
  '\u21B7': '&curarr;',
  '\u293C': '&curarrm;',
  '\u22CE': '&curlyvee;',
  '\u22CF': '&curlywedge;',
  '\xA4': '\xA4',
  '\u2231': '&cwint;',
  '\u232D': '&cylcty;',
  '\u2965': '&dHar;',
  '\u2020': '\u2020',
  '\u2010': '&dash;',
  '\u290F': '&dbkarow;',
  '\u21CA': '&ddarr;',
  '\u2A77': '&ddotseq;',
  '\xB0': '\xB0',
  '\u29B1': '&demptyv;',
  '\u297F': '&dfisht;',
  '\uD835\uDD21': '&dfr;',
  '\u2666': '&diamondsuit;',
  '\u22F2': '&disin;',
  '\xF7': '&div;',
  '\u22C7': '&divideontimes;',
  '\u231E': '&dlcorn;',
  '\u230D': '&dlcrop;',
  $: '&dollar;',
  '\uD835\uDD55': '&dopf;',
  '\u2251': '&doteqdot;',
  '\u2238': '&dotminus;',
  '\u2214': '&dotplus;',
  '\u22A1': '&dotsquare;',
  '\u231F': '&drcorn;',
  '\u230C': '&drcrop;',
  '\uD835\uDCB9': '&dscr;',
  '\u29F6': '&dsol;',
  '\u22F1': '&dtdot;',
  '\u29A6': '&dwangle;',
  '\u2A6E': '&easter;',
  '\u2256': '&ecir;',
  '\u2255': '&ecolon;',
  '\u2252': '&efDot;',
  '\uD835\uDD22': '&efr;',
  '\u2A9A': '&eg;',
  '\u2A96': '&egs;',
  '\u2A98': '&egsdot;',
  '\u2A99': '&el;',
  '\u23E7': '&elinters;',
  '\u2A95': '&els;',
  '\u2A97': '&elsdot;',
  '\u2004': '&emsp13;',
  '\u2005': '&emsp14;',
  '\u2003': '\u2003',
  '\u2002': '\u2002',
  '\u014B': '&eng;',
  '\u212F': '&escr;',
  '\u03B7': '\u03B7',
  '\xF0': '\xF0',
  '\xEB': '\xEB',
  '\u0444': '&fcy;',
  '\uFB03': '&ffilig;',
  '\uFB00': '&fflig;',
  '\uFB04': '&ffllig;',
  '\uFB02': '&fllig;',
  '\u0192': '\u0192',
  '\uFB01': '&filig;',
  '\u03B5': '&epsi;',
  '\u03F5': '&epsiv;',
  '\u0119': '&eogon;',
  '\uD835\uDD56': '&eopf;',
  '\u22D5': '&epar;',
  '\u29E3': '&eparsl;',
  '\u2A71': '&eplus;',
  '=': '&equals;',
  '\u225F': '&equest;',
  '\u2A78': '&equivDD;',
  '\u29E5': '&eqvparsl;',
  '\u2253': '&erDot;',
  '\u2971': '&erarr;',
  '\u20AC': '\u20AC',
  '!': '&excl;',
  '\u2640': '&female;',
  'fj': '&fjlig;',
  '\uD835\uDD23': '&ffr;',
  '\u266D': '&flat;',
  '\u25B1': '&fltns;',
  '\uD835\uDD57': '&fopf;',
  '\u22D4': '&fork;',
  '\u2AD9': '&forkv;',
  '\u2A0D': '&fpartint;',
  '\xBD': '\xBD',
  '\u2153': '&frac13;',
  '\xBC': '\xBC',
  '\u2155': '&frac15;',
  '\u2159': '&frac16;',
  '\u215B': '&frac18;',
  '\u2154': '&frac23;',
  '\u2156': '&frac25;',
  '\xBE': '\xBE',
  '\u2157': '&frac35;',
  '\u215C': '&frac38;',
  '\u2158': '&frac45;',
  '\u215A': '&frac56;',
  '\u215D': '&frac58;',
  '\u215E': '&frac78;',
  '\u2044': '\u2044',
  '\u2322': '&frown;',
  '\uD835\uDCBB': '&fscr;',
  '\u2A8C': '&gEl;',
  '\xE9': '\xE9',
  '\u01F5': '&gacute;',
  '\u03B3': '\u03B3',
  '\u044A': '&hardcy;',
  '\u210F': '&hbar;',
  '\u0125': '&hcirc;',
  '\u210A': '&gscr;',
  '\u2137': '&gimel;',
  '\u0453': '&gjcy;',
  '\u011F': '&gbreve;',
  '\u011D': '&gcirc;',
  '\u0433': '&gcy;',
  '\u0121': '&gdot;',
  '\u2A86': '&gap;',
  '\u2AA9': '&gescc;',
  '\u2A80': '&gesdot;',
  '\u2A82': '&gesdoto;',
  '\u2A84': '&gesdotol;',
  '\u22DB\uFE00': '&gesl;',
  '\u2A94': '&gesles;',
  '\uD835\uDD24': '&gfr;',
  '\u2A92': '&glE;',
  '\u2AA5': '&gla;',
  '\u2AA4': '&glj;',
  '\u2269': '&gnE;',
  '\u2A8A': '&gnap;',
  '\u2A88': '&gne;',
  '\u22E7': '&gnsim;',
  '\uD835\uDD58': '&gopf;',
  '\u2A8E': '&gsime;',
  '\u2A90': '&gsiml;',
  '\u2AA7': '&gtcc;',
  '\u2A7A': '&gtcir;',
  '\u22D7': '&gtdot;',
  '\u2995': '&gtlPar;',
  '\u2A7C': '&gtquest;',
  '\u2978': '&gtrarr;',
  '\u2269\uFE00': '&gvertneqq;',
  '\u2948': '&harrcir;',
  '\u21AD': '&harrw;',
  '\u2665': '\u2665',
  '\u2026': '\u2026',
  '\u22B9': '&hercon;',
  '\uD835\uDD25': '&hfr;',
  '\u2925': '&hksearow;',
  '\u2926': '&hkswarow;',
  '\u21FF': '&hoarr;',
  '\u223B': '&homtht;',
  '\u21A9': '&hookleftarrow;',
  '\u21AA': '&hookrightarrow;',
  '\uD835\uDD59': '&hopf;',
  '\u2015': '&horbar;',
  '\uD835\uDCBD': '&hscr;',
  '\u2043': '&hybull;',
  '\u0127': '&hstrok;',
  '\xED': '\xED',
  '\xEE': '\xEE',
  '\u0438': '&icy;',
  '\u0435': '&iecy;',
  '\xA1': '\xA1',
  '\uD835\uDD26': '&ifr;',
  '\xEC': '\xEC',
  '\u2A0C': '&iiiint;',
  '\u222D': '&iiint;',
  '\u29DC': '&iinfin;',
  '\u2129': '&iiota;',
  '\u0133': '&ijlig;',
  '\u012B': '&imacr;',
  '\u0131': '&imath;',
  '\u22B7': '&imof;',
  '\u01B5': '&imped;',
  '\u2105': '&incare;',
  '\u221E': '\u221E',
  '\u29DD': '&infintie;',
  '\u22BA': '&intcal;',
  '\u2A17': '&intlarhk;',
  '\u2A3C': '&intprod;',
  '\u0451': '&iocy;',
  '\u012F': '&iogon;',
  '\uD835\uDD5A': '&iopf;',
  '\u03B9': '\u03B9',
  '\xBF': '\xBF',
  '\uD835\uDCBE': '&iscr;',
  '\u22F9': '&isinE;',
  '\u22F5': '&isindot;',
  '\u22F4': '&isins;',
  '\u22F3': '&isinsv;',
  '\u0129': '&itilde;',
  '\u0456': '&iukcy;',
  '\xEF': '\xEF',
  '\u0135': '&jcirc;',
  '\u0439': '&jcy;',
  '\uD835\uDD27': '&jfr;',
  '\u0237': '&jmath;',
  '\uD835\uDD5B': '&jopf;',
  '\uD835\uDCBF': '&jscr;',
  '\u0458': '&jsercy;',
  '\u0454': '&jukcy;',
  '\u03BA': '\u03BA',
  '\u03F0': '&kappav;',
  '\u0137': '&kcedil;',
  '\u043A': '&kcy;',
  '\uD835\uDD28': '&kfr;',
  '\u0138': '&kgreen;',
  '\u0445': '&khcy;',
  '\u045C': '&kjcy;',
  '\uD835\uDD5C': '&kopf;',
  '\uD835\uDCC0': '&kscr;',
  '\u291B': '&lAtail;',
  '\u290E': '&lBarr;',
  '\u2A8B': '&lEg;',
  '\u2962': '&lHar;',
  '\u013A': '&lacute;',
  '\u29B4': '&laemptyv;',
  '\u03BB': '\u03BB',
  '\u2991': '&langd;',
  '\u2A85': '&lap;',
  '\xAB': '\xAB',
  '\u291F': '&larrbfs;',
  '\u291D': '&larrfs;',
  '\u21AB': '&larrlp;',
  '\u2939': '&larrpl;',
  '\u2973': '&larrsim;',
  '\u21A2': '&larrtl;',
  '\u2AAB': '&lat;',
  '\u2919': '&latail;',
  '\u2AAD': '&late;',
  '\u2AAD\uFE00': '&lates;',
  '\u290C': '&lbarr;',
  '\u2772': '&lbbrk;',
  '{': '&lbrace;',
  '[': '&lbrack;',
  '\u298B': '&lbrke;',
  '\u298F': '&lbrksld;',
  '\u298D': '&lbrkslu;',
  '\u013E': '&lcaron;',
  '\u013C': '&lcedil;',
  '\u043B': '&lcy;',
  '\u2936': '&ldca;',
  '\u2967': '&ldrdhar;',
  '\u294B': '&ldrushar;',
  '\u21B2': '&ldsh;',
  '\u2264': '\u2264',
  '\u21C7': '&leftleftarrows;',
  '\u22CB': '&leftthreetimes;',
  '\u2AA8': '&lescc;',
  '\u2A7F': '&lesdot;',
  '\u2A81': '&lesdoto;',
  '\u2A83': '&lesdotor;',
  '\u22DA\uFE00': '&lesg;',
  '\u2A93': '&lesges;',
  '\u22D6': '&lessdot;',
  '\u297C': '&lfisht;',
  '\uD835\uDD29': '&lfr;',
  '\u2A91': '&lgE;',
  '\u296A': '&lharul;',
  '\u2584': '&lhblk;',
  '\u0459': '&ljcy;',
  '\u296B': '&llhard;',
  '\u25FA': '&lltri;',
  '\u0140': '&lmidot;',
  '\u23B0': '&lmoust;',
  '\u2268': '&lnE;',
  '\u2A89': '&lnap;',
  '\u2A87': '&lne;',
  '\u22E6': '&lnsim;',
  '\u27EC': '&loang;',
  '\u21FD': '&loarr;',
  '\u21AC': '&looparrowright;',
  '\u2985': '&lopar;',
  '\uD835\uDD5D': '&lopf;',
  '\u2A2D': '&loplus;',
  '\u2A34': '&lotimes;',
  '\u2217': '\u2217',
  '\u25CA': '\u25CA',
  '(': '&lpar;',
  '\u2993': '&lparlt;',
  '\u296D': '&lrhard;',
  '\u200E': '\u200E',
  '\u22BF': '&lrtri;',
  '\u2039': '\u2039',
  '\uD835\uDCC1': '&lscr;',
  '\u2A8D': '&lsime;',
  '\u2A8F': '&lsimg;',
  '\u201A': '&lsquor;',
  '\u0142': '&lstrok;',
  '\u2AA6': '&ltcc;',
  '\u2A79': '&ltcir;',
  '\u22C9': '&ltimes;',
  '\u2976': '&ltlarr;',
  '\u2A7B': '&ltquest;',
  '\u2996': '&ltrPar;',
  '\u25C3': '&ltri;',
  '\u294A': '&lurdshar;',
  '\u2966': '&luruhar;',
  '\u2268\uFE00': '&lvertneqq;',
  '\u223A': '&mDDot;',
  '\xAF': '\xAF',
  '\u2642': '&male;',
  '\u2720': '&malt;',
  '\u25AE': '&marker;',
  '\u2A29': '&mcomma;',
  '\u043C': '&mcy;',
  '\u2014': '\u2014',
  '\uD835\uDD2A': '&mfr;',
  '\u2127': '&mho;',
  '\xB5': '\xB5',
  '\u2AF0': '&midcir;',
  '\u2212': '\u2212',
  '\u2A2A': '&minusdu;',
  '\u2ADB': '&mlcp;',
  '\u22A7': '&models;',
  '\uD835\uDD5E': '&mopf;',
  '\uD835\uDCC2': '&mscr;',
  '\u03BC': '\u03BC',
  '\u22B8': '&multimap;',
  '\u22D9\u0338': '&nGg;',
  '\u226B\u20D2': '&nGt;',
  '\u21CD': '&nLeftarrow;',
  '\u21CE': '&nLeftrightarrow;',
  '\u22D8\u0338': '&nLl;',
  '\u226A\u20D2': '&nLt;',
  '\u21CF': '&nRightarrow;',
  '\u22AF': '&nVDash;',
  '\u22AE': '&nVdash;',
  '\u0144': '&nacute;',
  '\u2220\u20D2': '&nang;',
  '\u2A70\u0338': '&napE;',
  '\u224B\u0338': '&napid;',
  '\u0149': '&napos;',
  '\u266E': '&natur;',
  '\u2A43': '&ncap;',
  '\u0148': '&ncaron;',
  '\u0146': '&ncedil;',
  '\u2A6D\u0338': '&ncongdot;',
  '\u2A42': '&ncup;',
  '\u043D': '&ncy;',
  '\u2013': '\u2013',
  '\u21D7': '&neArr;',
  '\u2924': '&nearhk;',
  '\u2250\u0338': '&nedot;',
  '\u2928': '&nesear;',
  '\uD835\uDD2B': '&nfr;',
  '\u21AE': '&nharr;',
  '\u2AF2': '&nhpar;',
  '\u22FC': '&nis;',
  '\u22FA': '&nisd;',
  '\u045A': '&njcy;',
  '\u2266\u0338': '&nlE;',
  '\u219A': '&nlarr;',
  '\u2025': '&nldr;',
  '\uD835\uDD5F': '&nopf;',
  '\xAC': '\xAC',
  '\u22F9\u0338': '&notinE;',
  '\u22F5\u0338': '&notindot;',
  '\u22F7': '&notinvb;',
  '\u22F6': '&notinvc;',
  '\u22FE': '&notnivb;',
  '\u22FD': '&notnivc;',
  '\u2AFD\u20E5': '&nparsl;',
  '\u2202\u0338': '&npart;',
  '\u2A14': '&npolint;',
  '\u219B': '&nrarr;',
  '\u2933\u0338': '&nrarrc;',
  '\u219D\u0338': '&nrarrw;',
  '\uD835\uDCC3': '&nscr;',
  '\u2284': '\u2284',
  '\u2AC5\u0338': '&nsubE;',
  '\u2285': '&nsup;',
  '\u2AC6\u0338': '&nsupE;',
  '\u03BD': '\u03BD',
  '#': '&num;',
  '\u2116': '&numero;',
  '\u2007': '&numsp;',
  '\u22AD': '&nvDash;',
  '\u2904': '&nvHarr;',
  '\u224D\u20D2': '&nvap;',
  '\u22AC': '&nvdash;',
  '\u2265\u20D2': '&nvge;',
  '>\u20D2': '&nvgt;',
  '\u29DE': '&nvinfin;',
  '\u2902': '&nvlArr;',
  '\u2264\u20D2': '&nvle;',
  '<\u20D2': '&nvlt;',
  '\u22B4\u20D2': '&nvltrie;',
  '\u2903': '&nvrArr;',
  '\u22B5\u20D2': '&nvrtrie;',
  '\u223C\u20D2': '&nvsim;',
  '\u21D6': '&nwArr;',
  '\u2923': '&nwarhk;',
  '\u2927': '&nwnear;',
  '\xF3': '\xF3',
  '\xF4': '\xF4',
  '\u043E': '&ocy;',
  '\u0151': '&odblac;',
  '\u2A38': '&odiv;',
  '\u29BC': '&odsold;',
  '\u0153': '\u0153',
  '\u29BF': '&ofcir;',
  '\uD835\uDD2C': '&ofr;',
  '\u02DB': '&ogon;',
  '\xF2': '\xF2',
  '\u29C1': '&ogt;',
  '\u29B5': '&ohbar;',
  '\u29BE': '&olcir;',
  '\u29BB': '&olcross;',
  '\u29C0': '&olt;',
  '\u014D': '&omacr;',
  '\u03C9': '\u03C9',
  '\u03BF': '\u03BF',
  '\u29B6': '&omid;',
  '\uD835\uDD60': '&oopf;',
  '\u29B7': '&opar;',
  '\u29B9': '&operp;',
  '\u2228': '\u2228',
  '\u2A5D': '&ord;',
  '\u2134': '&order;',
  '\xAA': '\xAA',
  '\xBA': '\xBA',
  '\u22B6': '&origof;',
  '\u2A56': '&oror;',
  '\u2A57': '&orslope;',
  '\u2298': '&osol;',
  '\u2A36': '&otimesas;',
  '\u2AF3': '&parsim;',
  '\u043F': '&pcy;',
  '%': '&percnt;',
  '.': '&period;',
  '\u2031': '&pertenk;',
  '\uD835\uDD2D': '&pfr;',
  '\u03C6': '\u03C6',
  '\u260E': '&phone;',
  '+': '&plus;',
  '\u2A25': '&plusdu;',
  '\u2A72': '&pluse;',
  '\u2A26': '&plussim;',
  '\u2A27': '&plustwo;',
  '\u2A15': '&pointint;',
  '\uD835\uDD61': '&popf;',
  '\xA3': '\xA3',
  '\u2AB3': '&prE;',
  '\u2AB7': '&prap;',
  '\u2AB9': '&precnapprox;',
  '\u2AB5': '&precneqq;',
  '\u22E8': '&precnsim;',
  '\u2032': '\u2032',
  '\u232E': '&profalar;',
  '\u2312': '&profline;',
  '\u2313': '&profsurf;',
  '\u22B0': '&prurel;',
  '\uD835\uDCC5': '&pscr;',
  '\u03C8': '\u03C8',
  '\u2008': '&puncsp;',
  '\uD835\uDD2E': '&qfr;',
  '\uD835\uDD62': '&qopf;',
  '\u2057': '&qprime;',
  '\uD835\uDCC6': '&qscr;',
  '\u2A16': '&quatint;',
  '?': '&quest;',
  '\u291C': '&rAtail;',
  '\u2964': '&rHar;',
  '\u223D\u0331': '&race;',
  '\u0155': '&racute;',
  '\u29B3': '&raemptyv;',
  '\u2992': '&rangd;',
  '\u29A5': '&range;',
  '\xBB': '\xBB',
  '\u2975': '&rarrap;',
  '\u2920': '&rarrbfs;',
  '\u2933': '&rarrc;',
  '\u291E': '&rarrfs;',
  '\u2945': '&rarrpl;',
  '\u2974': '&rarrsim;',
  '\u21A3': '&rarrtl;',
  '\u219D': '&rarrw;',
  '\u291A': '&ratail;',
  '\u2236': '&ratio;',
  '\u2773': '&rbbrk;',
  '}': '&rbrace;',
  ']': '&rbrack;',
  '\u298C': '&rbrke;',
  '\u298E': '&rbrksld;',
  '\u2990': '&rbrkslu;',
  '\u0159': '&rcaron;',
  '\u0157': '&rcedil;',
  '\u0440': '&rcy;',
  '\u2937': '&rdca;',
  '\u2969': '&rdldhar;',
  '\u21B3': '&rdsh;',
  '\u25AD': '&rect;',
  '\u297D': '&rfisht;',
  '\uD835\uDD2F': '&rfr;',
  '\u296C': '&rharul;',
  '\u03C1': '\u03C1',
  '\u03F1': '&rhov;',
  '\u21C9': '&rightrightarrows;',
  '\u22CC': '&rightthreetimes;',
  '\u02DA': '&ring;',
  '\u200F': '\u200F',
  '\u23B1': '&rmoust;',
  '\u2AEE': '&rnmid;',
  '\u27ED': '&roang;',
  '\u21FE': '&roarr;',
  '\u2986': '&ropar;',
  '\uD835\uDD63': '&ropf;',
  '\u2A2E': '&roplus;',
  '\u27FC': '&longmapsto;',
  '\u2A35': '&rotimes;',
  ')': '&rpar;',
  '\u2994': '&rpargt;',
  '\u2A12': '&rppolint;',
  '\u203A': '\u203A',
  '\uD835\uDCC7': '&rscr;',
  '\u22CA': '&rtimes;',
  '\u25B9': '&rtri;',
  '\u29CE': '&rtriltri;',
  '\u2968': '&ruluhar;',
  '\u211E': '&rx;',
  '\u015B': '&sacute;',
  '\u2AB4': '&scE;',
  '\u2AB8': '&scap;',
  '\u0161': '\u0161',
  '\u015F': '&scedil;',
  '\u015D': '&scirc;',
  '\u2AB6': '&scnE;',
  '\u2ABA': '&scnap;',
  '\u22E9': '&scnsim;',
  '\u2A13': '&scpolint;',
  '\u0441': '&scy;',
  '\u22C5': '\u22C5',
  '\u2A66': '&sdote;',
  '\u21D8': '&seArr;',
  '\xA7': '\xA7',
  ';': '&semi;',
  '\u2929': '&seswar;',
  '\u2736': '&sext;',
  '\uD835\uDD30': '&sfr;',
  '\u266F': '&sharp;',
  '\u0449': '&shchcy;',
  '\u0448': '&shcy;',
  '\xAD': '\xAD',
  '\u03C3': '\u03C3',
  '\u03C2': '\u03C2',
  '\u2A6A': '&simdot;',
  '\u2A9E': '&simg;',
  '\u2AA0': '&simgE;',
  '\u2A9D': '&siml;',
  '\u2A9F': '&simlE;',
  '\u2246': '&simne;',
  '\u2A24': '&simplus;',
  '\u2972': '&simrarr;',
  '\u2A33': '&smashp;',
  '\u29E4': '&smeparsl;',
  '\u2323': '&smile;',
  '\u2AAA': '&smt;',
  '\u2AAC': '&smte;',
  '\u2AAC\uFE00': '&smtes;',
  '\u044C': '&softcy;',
  '/': '&sol;',
  '\u29C4': '&solb;',
  '\u233F': '&solbar;',
  '\uD835\uDD64': '&sopf;',
  '\u2660': '\u2660',
  '\u2293\uFE00': '&sqcaps;',
  '\u2294\uFE00': '&sqcups;',
  '\uD835\uDCC8': '&sscr;',
  '\u2606': '&star;',
  '\u03D5': '&straightphi;',
  '\u2282': '\u2282',
  '\u2AC5': '&subE;',
  '\u2ABD': '&subdot;',
  '\u2AC3': '&subedot;',
  '\u2AC1': '&submult;',
  '\u2ACB': '&subnE;',
  '\u228A': '&subne;',
  '\u2ABF': '&subplus;',
  '\u2979': '&subrarr;',
  '\u2AC7': '&subsim;',
  '\u2AD5': '&subsub;',
  '\u2AD3': '&subsup;',
  '\u266A': '&sung;',
  '\xB9': '\xB9',
  '\xB2': '\xB2',
  '\xB3': '\xB3',
  '\u2AC6': '&supE;',
  '\u2ABE': '&supdot;',
  '\u2AD8': '&supdsub;',
  '\u2AC4': '&supedot;',
  '\u27C9': '&suphsol;',
  '\u2AD7': '&suphsub;',
  '\u297B': '&suplarr;',
  '\u2AC2': '&supmult;',
  '\u2ACC': '&supnE;',
  '\u228B': '&supne;',
  '\u2AC0': '&supplus;',
  '\u2AC8': '&supsim;',
  '\u2AD4': '&supsub;',
  '\u2AD6': '&supsup;',
  '\u21D9': '&swArr;',
  '\u292A': '&swnwar;',
  '\xDF': '\xDF',
  '\u2316': '&target;',
  '\u03C4': '\u03C4',
  '\u0165': '&tcaron;',
  '\u0163': '&tcedil;',
  '\u0442': '&tcy;',
  '\u2315': '&telrec;',
  '\uD835\uDD31': '&tfr;',
  '\u03B8': '\u03B8',
  '\u03D1': '\u03D1',
  '\xFE': '\xFE',
  '\xD7': '\xD7',
  '\u2A31': '&timesbar;',
  '\u2A30': '&timesd;',
  '\u2336': '&topbot;',
  '\u2AF1': '&topcir;',
  '\uD835\uDD65': '&topf;',
  '\u2ADA': '&topfork;',
  '\u2034': '&tprime;',
  '\u25B5': '&triangle;',
  '\u25BF': '&triangledown;',
  '\u225C': '&triangleq;',
  '\u25EC': '&tridot;',
  '\u2A3A': '&triminus;',
  '\u2A39': '&triplus;',
  '\u29CD': '&trisb;',
  '\u2A3B': '&tritime;',
  '\u23E2': '&trpezium;',
  '\uD835\uDCC9': '&tscr;',
  '\u0446': '&tscy;',
  '\u045B': '&tshcy;',
  '\u0167': '&tstrok;',
  '\u2963': '&uHar;',
  '\xFA': '\xFA',
  '\u045E': '&ubrcy;',
  '\u016D': '&ubreve;',
  '\xFB': '\xFB',
  '\u0443': '&ucy;',
  '\u0171': '&udblac;',
  '\u297E': '&ufisht;',
  '\uD835\uDD32': '&ufr;',
  '\xF9': '\xF9',
  '\u2580': '&uhblk;',
  '\u231C': '&ulcorn;',
  '\u230F': '&ulcrop;',
  '\u25F8': '&ultri;',
  '\u016B': '&umacr;',
  '\u0173': '&uogon;',
  '\uD835\uDD66': '&uopf;',
  '\u03C5': '&upsi;',
  '\u21C8': '&upuparrows;',
  '\u231D': '&urcorn;',
  '\u230E': '&urcrop;',
  '\u016F': '&uring;',
  '\u25F9': '&urtri;',
  '\uD835\uDCCA': '&uscr;',
  '\u22F0': '&utdot;',
  '\u0169': '&utilde;',
  '\xFC': '\xFC',
  '\u29A7': '&uwangle;',
  '\u2AE8': '&vBar;',
  '\u2AE9': '&vBarv;',
  '\u299C': '&vangrt;',
  '\u2205': '&varnothing;',
  '\u228A\uFE00': '&varsubsetneq;',
  '\u2ACB\uFE00': '&varsubsetneqq;',
  '\u228B\uFE00': '&varsupsetneq;',
  '\u2ACC\uFE00': '&varsupsetneqq;',
  '\u0432': '&vcy;',
  '\u22BB': '&veebar;',
  '\u225A': '&veeeq;',
  '\u22EE': '&vellip;',
  '\uD835\uDD33': '&vfr;',
  '\uD835\uDD67': '&vopf;',
  '\uD835\uDCCB': '&vscr;',
  '\u299A': '&vzigzag;',
  '\u0175': '&wcirc;',
  '\u2A5F': '&wedbar;',
  '\u2259': '&wedgeq;',
  '\u2118': '\u2118',
  '\uD835\uDD34': '&wfr;',
  '\uD835\uDD68': '&wopf;',
  '\uD835\uDCCC': '&wscr;',
  '\uD835\uDD35': '&xfr;',
  '\u03BE': '\u03BE',
  '\u22FB': '&xnis;',
  '\uD835\uDD69': '&xopf;',
  '\uD835\uDCCD': '&xscr;',
  '\xFD': '\xFD',
  '\u044F': '&yacy;',
  '\u0177': '&ycirc;',
  '\u044B': '&ycy;',
  '\xA5': '\xA5',
  '\uD835\uDD36': '&yfr;',
  '\u0457': '&yicy;',
  '\uD835\uDD6A': '&yopf;',
  '\uD835\uDCCE': '&yscr;',
  '\u044E': '&yucy;',
  '\xFF': '\xFF',
  '\u017A': '&zacute;',
  '\u017E': '&zcaron;',
  '\u0437': '&zcy;',
  '\u017C': '&zdot;',
  '\u03B6': '\u03B6',
  '\uD835\uDD37': '&zfr;',
  '\u0436': '&zhcy;',
  '\u21DD': '&zigrarr;',
  '\uD835\uDD6B': '&zopf;',
  '\uD835\uDCCF': '&zscr;',
  '\u200D': '\u200D',
  '\u200C': '\u200C'
};

/**
 * @module htmlEncode
 * @description
 * Convert all applicable characters to HTML entities.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the htmlEncode function
 * ```sh
 * yarn add strman.htmlencode
 * ```
 * ## Usage
 * ```javascript
 * import { htmlEncode } from 'strman'
 * // OR
 * import htmlEncode from 'strman.htmlencode'
 * ```
 * @param {String} value value to encode.
 * @example
 * htmlEncode('<div>')
 * // => '&lt;div&gt;'
 * @returns { String } The encoded data.
 */
var htmlencode = (function (value) {
  return replace(value, '[\\u00A0-\\u9999<>\\&]', function (match) {
    if (typeof entitiesEncode[match] !== 'undefined') {
      return entitiesEncode[match];
    }
    return match;
  }, true, true);
});

/**
 * @module binEncode
 * @description
 * Convert string chars to binary unicode (16 digits)
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the binEncode function
 * ```sh
 * yarn add strman.binencode
 * ```
 * ## Usage
 * ```javascript
 * import { binEncode } from 'strman'
 * // OR
 * import binEncode from 'strman.binencode'
 * ```
 * @param {String} value - Value to encode
 * @example
 * binEncode('strman')
 * // => '00000000011100110000000001110100000000000111001000000000011011010000000001100001'
 * @returns {String} String in binary format.
 */
var binencode = (function (value) {
  return encode(value, LENGTH_BINARY, BASE_BINARY);
});

/**
 * @module reverse
 * @description
 * Returns a reversed string.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the reverse function
 * ```sh
 * yarn add strman.reverse
 * ```
 * ## Usage
 * ```javascript
 * import { reverse } from 'strman'
 * // OR
 * import reverse from 'strman.reverse'
 * ```
 * @param {String} value - The String!
 * @example
 * reverse('strman')
 * // => 'namrts'
 * @returns {String}  The String reversed!
 */
var reverse = (function (value) {
  return split(value, '').reduceRight(function (previous, current) {
    return append(previous, current);
  }, '');
});

exports.chars = chars;
exports.ensureLeft = ensureleft;
exports.inequal = inequal;
exports.prepend = prepend;
exports.rightPad = rightpad;
exports.surround = surround;
exports.truncate = truncate;
exports.collapseWhitespace = collapsewhitespace;
exports.ensureRight = ensureright;
exports.insert = insert;
exports.prependArray = prependArray;
exports.rightTrim = rightTrim;
exports.toCamelCase = toCamelCase;
exports.urlDecode = urlDecode;
exports.append = append;
exports.compare = compare;
exports.equal = equal;
exports.isLowerCase = islowercase;
exports.removeEmptyStrings = removeemptystrings;
exports.safeTruncate = safetruncate;
exports.toDecamelize = toDecamelize;
exports.urlEncode = urlencode;
exports.appendArray = appendArray;
exports.contains = contains;
exports.first = first;
exports.isString = isstring;
exports.removeLeft = removeleft;
exports.shuffle = shuffle$1;
exports.toKebabCase = tokebabcase;
exports.at = at;
exports.containsAll = containsall;
exports.format = format;
exports.isUpperCase = isuppercase;
exports.removeNonWords = removenonwords;
exports.slice = slice;
exports.toLowerCase = toLowerCase;
exports.base64decode = base64decode;
exports.containsAny = containsany;
exports.hexDecode = hexdecode;
exports.last = last;
exports.removeRight = removeright;
exports.slugify = slugify;
exports.toSnakeCase = tosnakecase;
exports.base64encode = base64encode;
exports.countSubstr = countsubstr;
exports.hexEncode = hexencode;
exports.lastIndexOf = lastIndexOf;
exports.removeSpaces = removeSpaces;
exports.split = split;
exports.toStudlyCaps = toStudlyCaps;
exports.between = between;
exports.decDecode = decdecode;
exports.leftPad = leftPad;
exports.repeat = repeat;
exports.startsWith = startsWith;
exports.toUpperCase = toUpperCase;
exports.binDecode = bindecode;
exports.decEncode = decencode;
exports.htmlDecode = htmldecode;
exports.htmlEncode = htmlencode;
exports.leftTrim = leftTrim;
exports.replace = replace;
exports.transliterate = transliterate;
exports.binEncode = binencode;
exports.endsWith = endsWith;
exports.indexOf = indexOf;
exports.reverse = reverse;
exports.substr = substr;
exports.trim = trim;
exports.default = exports;
